import type { Multiaddr } from '@multiformats/multiaddr';
export interface MatchesFunction {
    (a: string | Uint8Array | Multiaddr): boolean;
}
export interface PartialMatchesFunction {
    (protos: string[]): boolean | string[] | null;
}
export interface Mafmt {
    toString: () => string;
    input?: Array<(Mafmt | (() => Mafmt))>;
    matches: MatchesFunction;
    partialMatch: PartialMatchesFunction;
}
export declare const DNS4: Mafmt;
export declare const DNS6: Mafmt;
export declare const DNSADDR: Mafmt;
export declare const DNS: Mafmt;
export declare const IP: Mafmt;
export declare const TCP: Mafmt;
export declare const UDP: Mafmt;
export declare const UTP: Mafmt;
export declare const QUIC: Mafmt;
export declare const QUICV1: Mafmt;
export declare const WebSockets: Mafmt;
export declare const WebSocketsSecure: Mafmt;
export declare const HTTP: Mafmt;
export declare const HTTPS: Mafmt;
export declare const WebRTCDirect: Mafmt;
export declare const WebTransport: Mafmt;
/**
 * @deprecated
 */
export declare const P2PWebRTCStar: Mafmt;
export declare const WebSocketStar: Mafmt;
/**
 * @deprecated
 */
export declare const P2PWebRTCDirect: Mafmt;
export declare const Reliable: Mafmt;
export declare const Stardust: Mafmt;
export declare const Circuit: Mafmt;
export declare const P2P: Mafmt;
export declare const IPFS: Mafmt;
export declare const WebRTC: Mafmt;
//# sourceMappingURL=index.d.ts.map