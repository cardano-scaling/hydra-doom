import { CustomError } from 'ts-custom-error';
import { Logger } from 'ts-log';
export declare class InvalidModuleState<ModuleState> extends CustomError {
    constructor(moduleName: string, methodName: string, requiredState: ModuleState);
}
export declare type RunnableModuleState = null | 'initializing' | 'initialized' | 'starting' | 'running' | 'stopping';
export declare abstract class RunnableModule {
    state: RunnableModuleState;
    protected abstract initializeImpl(): Promise<void>;
    protected abstract startImpl(): Promise<void>;
    protected abstract shutdownImpl(): Promise<void>;
    logger: Logger;
    name: string;
    constructor(name: string, logger: Logger);
    initialize(): Promise<void>;
    start(): Promise<void>;
    shutdown(): Promise<void>;
    initializeBefore(): void;
    initializeAfter(): void;
    startBefore(): void;
    startAfter(): void;
    shutdownBefore(): void;
    shutdownAfter(): void;
}
//# sourceMappingURL=RunnableModule.d.ts.map