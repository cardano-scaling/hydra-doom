import { CustomError } from 'ts-custom-error';
export declare const formatErrorMessage: (reason: string, detail?: string) => string;
export declare const stripStackTrace: (error: unknown) => void;
export declare class ComposableError<InnerError = unknown> extends CustomError {
    innerError?: InnerError | undefined;
    private static stackDelimiter;
    constructor(message: string, innerError?: InnerError | undefined);
}
export declare class InvalidStringError<InnerError = unknown> extends ComposableError<InnerError> {
    constructor(expectation: string, innerError?: InnerError);
}
export declare class InvalidArgumentError extends CustomError {
    constructor(argName: string, message: string);
}
export declare class InvalidStateError extends CustomError {
    constructor(message: string);
}
//# sourceMappingURL=errors.d.ts.map