"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var _ManagedFreeableScope_scopeStack, _ManagedFreeableScope_disposed, _AutoFree_scope, _AutoFree_callback;
Object.defineProperty(exports, "__esModule", { value: true });
exports.usingAutoFree = exports.ManagedFreeableScope = void 0;
const isPromise_1 = require("./isPromise");
class ManagedFreeableScope {
    constructor() {
        _ManagedFreeableScope_scopeStack.set(this, []);
        _ManagedFreeableScope_disposed.set(this, false);
    }
    manage(freeable) {
        if (freeable === undefined)
            return freeable;
        if (__classPrivateFieldGet(this, _ManagedFreeableScope_disposed, "f"))
            throw new Error('This scope is already disposed.');
        __classPrivateFieldGet(this, _ManagedFreeableScope_scopeStack, "f").push(freeable);
        return freeable;
    }
    dispose() {
        if (__classPrivateFieldGet(this, _ManagedFreeableScope_disposed, "f"))
            return;
        for (const resource of __classPrivateFieldGet(this, _ManagedFreeableScope_scopeStack, "f")) {
            if (resource?.ptr === 0 || !resource?.free) {
                continue;
            }
            resource?.free();
        }
        __classPrivateFieldSet(this, _ManagedFreeableScope_disposed, true, "f");
    }
}
exports.ManagedFreeableScope = ManagedFreeableScope;
_ManagedFreeableScope_scopeStack = new WeakMap(), _ManagedFreeableScope_disposed = new WeakMap();
class AutoFree {
    constructor(cb) {
        _AutoFree_scope.set(this, void 0);
        _AutoFree_callback.set(this, void 0);
        __classPrivateFieldSet(this, _AutoFree_callback, cb, "f");
        __classPrivateFieldSet(this, _AutoFree_scope, new ManagedFreeableScope(), "f");
    }
    execute() {
        let result;
        try {
            result = __classPrivateFieldGet(this, _AutoFree_callback, "f").call(this, __classPrivateFieldGet(this, _AutoFree_scope, "f"));
            if ((0, isPromise_1.isPromise)(result)) {
                return result
                    .then((value) => {
                    __classPrivateFieldGet(this, _AutoFree_scope, "f").dispose();
                    return value;
                })
                    .catch((error) => {
                    __classPrivateFieldGet(this, _AutoFree_scope, "f").dispose();
                    throw error;
                });
            }
            __classPrivateFieldGet(this, _AutoFree_scope, "f").dispose();
            return result;
        }
        catch (error) {
            __classPrivateFieldGet(this, _AutoFree_scope, "f").dispose();
            throw error;
        }
    }
}
_AutoFree_scope = new WeakMap(), _AutoFree_callback = new WeakMap();
const usingAutoFree = (cb) => new AutoFree(cb).execute();
exports.usingAutoFree = usingAutoFree;
//# sourceMappingURL=freeable.js.map