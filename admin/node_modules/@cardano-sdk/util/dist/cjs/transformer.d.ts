export interface Transform<From, To, Context = {}> {
    (from: From, context?: Context): To extends object ? {
        [k in keyof Required<To>]: To[k];
    } : To;
}
export declare type Transformer<From, To, Context = {}> = {
    [k in keyof Required<To>]: Transform<From, To[k], Context> | Transform<From, Promise<To[k]>, Context> | Transformer<From, To[k], Context> | Transformer<From, Promise<To[k]>, Context>;
};
export declare const transformObj: <From, To, Context = {}>(from: From, transformer: Transformer<From, To, Context>, context?: Context | undefined) => Promise<To>;
//# sourceMappingURL=transformer.d.ts.map