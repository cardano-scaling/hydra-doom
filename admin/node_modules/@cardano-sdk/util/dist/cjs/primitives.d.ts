import { OpaqueString } from './opaqueTypes';
export declare const assertIsBech32WithPrefix: (target: string, prefix: string | string[], expectedDecodedLength?: number | number[]) => void;
export declare const typedBech32: <T>(target: string, prefix: string | string[], expectedDecodedLength?: number | number[]) => T;
export declare const assertIsHexString: (target: string, expectedLength?: number) => void;
export declare const typedHex: <T>(value: string, length?: number) => T;
export declare type Base64Blob = OpaqueString<'Base64Blob'>;
export declare const Base64Blob: {
    (target: string): Base64Blob;
    fromBytes(bytes: Uint8Array): Base64Blob;
};
export declare type HexBlob = OpaqueString<'HexBlob'>;
export declare const HexBlob: {
    (target: string): HexBlob;
    fromBytes(bytes: Uint8Array): HexBlob;
    fromBase64(rawData: string): HexBlob;
    toTypedBech32<T>(prefix: string, hexString: HexBlob): T;
};
export declare const castHexBlob: <T>(target: HexBlob, expectedLength?: number) => T;
//# sourceMappingURL=primitives.d.ts.map