"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RunnableModule = exports.InvalidModuleState = void 0;
const ts_custom_error_1 = require("ts-custom-error");
const logging_1 = require("./logging");
class InvalidModuleState extends ts_custom_error_1.CustomError {
    constructor(moduleName, methodName, requiredState) {
        super();
        this.message = `${methodName} cannot be called unless ${moduleName} is ${requiredState}`;
    }
}
exports.InvalidModuleState = InvalidModuleState;
class RunnableModule {
    constructor(name, logger) {
        this.state = null;
        this.logger = (0, logging_1.contextLogger)(logger, name);
        this.name = name;
    }
    async initialize() {
        this.initializeBefore();
        await this.initializeImpl();
        this.initializeAfter();
    }
    async start() {
        this.startBefore();
        await this.startImpl();
        this.startAfter();
    }
    async shutdown() {
        this.shutdownBefore();
        await this.shutdownImpl();
        this.shutdownAfter();
    }
    initializeBefore() {
        if (this.state !== null) {
            throw new InvalidModuleState(this.name, 'initializeBefore', null);
        }
        this.state = 'initializing';
        this.logger.info('Initializing...');
    }
    initializeAfter() {
        if (this.state !== 'initializing') {
            throw new InvalidModuleState(this.name, 'initializeAfter', 'initializing');
        }
        this.state = 'initialized';
        this.logger.info('Initialized');
    }
    startBefore() {
        if (this.state !== 'initialized') {
            throw new InvalidModuleState(this.name, 'start', 'initialized');
        }
        this.state = 'starting';
        this.logger.info('Starting...');
    }
    startAfter() {
        if (this.state !== 'starting') {
            throw new InvalidModuleState(this.name, 'start', 'starting');
        }
        this.state = 'running';
        this.logger.info('Started');
    }
    shutdownBefore() {
        if (this.state !== 'running') {
            throw new InvalidModuleState(this.name, 'shutdown', 'running');
        }
        this.state = 'stopping';
        this.logger.info('Stopping...');
    }
    shutdownAfter() {
        if (this.state !== 'stopping') {
            throw new InvalidModuleState(this.name, 'shutdown', 'stopping');
        }
        this.state = 'initialized';
        this.logger.info('Shutdown complete');
    }
}
exports.RunnableModule = RunnableModule;
//# sourceMappingURL=RunnableModule.js.map