"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.throwIfOutsideRange = exports.inRange = exports.throwIfInvalidRange = exports.OutsideRangeError = exports.InvalidRangeError = void 0;
const ts_custom_error_1 = require("ts-custom-error");
class InvalidRangeError extends ts_custom_error_1.CustomError {
    constructor(message) {
        super();
        this.message = message;
    }
}
exports.InvalidRangeError = InvalidRangeError;
class OutsideRangeError extends ts_custom_error_1.CustomError {
    constructor(value, { lowerBound, upperBound }, description) {
        super();
        this.message = `${description} - ${value} must be between ${lowerBound} and ${upperBound}`;
    }
}
exports.OutsideRangeError = OutsideRangeError;
const throwIfInvalidRange = ({ lowerBound, upperBound }) => {
    if (!lowerBound && !upperBound) {
        throw new InvalidRangeError('Must provide at least one bound');
    }
    else if (lowerBound === upperBound) {
        throw new InvalidRangeError(`Lower bound: ${lowerBound}, cannot equal upper bound ${upperBound}`);
    }
    else if (lowerBound && lowerBound > upperBound) {
        throw new InvalidRangeError(`Lower bound: ${lowerBound}, cannot be larger than upper bound: ${upperBound}`);
    }
};
exports.throwIfInvalidRange = throwIfInvalidRange;
const inRange = (value, range) => {
    (0, exports.throwIfInvalidRange)(range);
    const { lowerBound, upperBound } = range;
    if (!lowerBound && upperBound) {
        return value <= upperBound;
    }
    else if (lowerBound && !upperBound) {
        return value >= lowerBound;
    }
    return value >= lowerBound && value <= upperBound;
};
exports.inRange = inRange;
const throwIfOutsideRange = (value, range, description) => {
    if (!(0, exports.inRange)(value, range)) {
        throw new OutsideRangeError(value, range, description);
    }
};
exports.throwIfOutsideRange = throwIfOutsideRange;
//# sourceMappingURL=Range.js.map