export declare type TransformKey = (key: string) => string;
export interface ToSerializableObjectOptions {
    transformationTypeKey?: string;
    serializeKey?: TransformKey;
}
export interface ClassOf<T> extends Function {
    new (...args: any[]): T;
}
export declare type ErrorClass = ClassOf<Error>;
export interface FromSerializableObjectOptions {
    transformationTypeKey?: string;
    deserializeKey?: TransformKey;
    errorTypes?: ErrorClass[];
}
export declare const toSerializableObject: (obj: unknown, options?: ToSerializableObjectOptions) => unknown;
export declare const fromSerializableObject: <T>(serializableObject: unknown, options?: FromSerializableObjectOptions) => T;
//# sourceMappingURL=serializableObject.d.ts.map