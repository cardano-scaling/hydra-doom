import { CustomError } from 'ts-custom-error';
export class InvalidRangeError extends CustomError {
    constructor(message) {
        super();
        this.message = message;
    }
}
export class OutsideRangeError extends CustomError {
    constructor(value, { lowerBound, upperBound }, description) {
        super();
        this.message = `${description} - ${value} must be between ${lowerBound} and ${upperBound}`;
    }
}
export const throwIfInvalidRange = ({ lowerBound, upperBound }) => {
    if (!lowerBound && !upperBound) {
        throw new InvalidRangeError('Must provide at least one bound');
    }
    else if (lowerBound === upperBound) {
        throw new InvalidRangeError(`Lower bound: ${lowerBound}, cannot equal upper bound ${upperBound}`);
    }
    else if (lowerBound && lowerBound > upperBound) {
        throw new InvalidRangeError(`Lower bound: ${lowerBound}, cannot be larger than upper bound: ${upperBound}`);
    }
};
export const inRange = (value, range) => {
    throwIfInvalidRange(range);
    const { lowerBound, upperBound } = range;
    if (!lowerBound && upperBound) {
        return value <= upperBound;
    }
    else if (lowerBound && !upperBound) {
        return value >= lowerBound;
    }
    return value >= lowerBound && value <= upperBound;
};
export const throwIfOutsideRange = (value, range, description) => {
    if (!inRange(value, range)) {
        throw new OutsideRangeError(value, range, description);
    }
};
//# sourceMappingURL=Range.js.map