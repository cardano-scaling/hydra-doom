import { CustomError } from 'ts-custom-error';
export interface Range<TBound> {
    lowerBound?: TBound;
    upperBound?: TBound;
}
export declare class InvalidRangeError extends CustomError {
    constructor(message: string);
}
export declare class OutsideRangeError<T, R> extends CustomError {
    constructor(value: T, { lowerBound, upperBound }: Range<R>, description: string);
}
export declare const throwIfInvalidRange: <T>({ lowerBound, upperBound }: Range<T>) => void;
export declare const inRange: <T>(value: T, range: Range<T>) => boolean;
export declare const throwIfOutsideRange: <T>(value: T, range: Range<T>, description: string) => void;
//# sourceMappingURL=Range.d.ts.map