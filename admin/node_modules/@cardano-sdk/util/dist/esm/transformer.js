import isUndefined from 'lodash/isUndefined.js';
import merge from 'lodash/merge.js';
const deepOmitBy = (obj, predicate) => {
    if (Array.isArray(obj))
        return obj;
    if (obj && typeof obj === 'object') {
        return (Object.entries(obj)
            .map(([k, v]) => [k, typeof v === 'object' ? deepOmitBy(v, predicate) : v, predicate(v)])
            .reduce((result, [k, v, omit]) => (omit ? result : merge(result, { [k]: v })), {}));
    }
    return obj;
};
export const transformObj = async (from, transformer, context) => {
    const entries = Object.entries(transformer);
    const result = Object.create({});
    for (const [key, value] of entries) {
        result[key] = await (typeof value === 'function'
            ? value(from, context)
            : transformObj(from, value, context));
    }
    return deepOmitBy(result, isUndefined);
};
//# sourceMappingURL=transformer.js.map