import { Logger } from 'ts-log';
import { Primitive } from 'type-fest';
export interface Shutdown {
    shutdown(): void;
}
export declare type Awaited<T> = T extends PromiseLike<infer U> ? U : T;
export declare type DeepPartial<T, O = never> = T extends O | Primitive ? T : {
    [P in keyof T]?: DeepPartial<T[P], O>;
};
export interface Freeable {
    free: () => void;
}
export interface WithLogger {
    logger: Logger;
}
declare type Impossible<K extends keyof any> = {
    [P in K]: never;
};
export declare type NoExtraProperties<T, U> = U & Impossible<Exclude<keyof U, keyof T>>;
export {};
//# sourceMappingURL=types.d.ts.map