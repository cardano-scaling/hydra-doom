import { CustomError } from 'ts-custom-error';
export const formatErrorMessage = (reason, detail) => reason + (detail ? ` (${detail})` : '');
const isWithInnerError = (error) => error !== null && typeof error === 'object' && 'innerError' in error;
const isErrorLike = (error) => {
    if (!error || typeof error !== 'object' || !('message' in error && 'stack' in error))
        return false;
    const { message, stack } = error;
    return typeof message === 'string' && typeof stack === 'string';
};
export const stripStackTrace = (error) => {
    if (!error)
        return;
    if (isErrorLike(error)) {
        delete error.stack;
    }
    if (isWithInnerError(error)) {
        stripStackTrace(error.innerError);
    }
};
export class ComposableError extends CustomError {
    constructor(message, innerError) {
        let firstLineOfInnerErrorStack = '';
        let innerErrorStack = [];
        if (isErrorLike(innerError) && innerError.stack) {
            [firstLineOfInnerErrorStack, ...innerErrorStack] = innerError.stack.split(ComposableError.stackDelimiter);
            message = `${message} due to\n ${firstLineOfInnerErrorStack}`;
        }
        if (typeof innerError === 'string')
            message = `${message} due to\n ${innerError}`;
        super(message);
        this.innerError = innerError;
        if (!this.stack || innerErrorStack.length === 0)
            return;
        const [firstLineOfStack] = this.stack.split(ComposableError.stackDelimiter);
        Object.defineProperty(this, 'stack', {
            configurable: true,
            value: `${firstLineOfStack}${innerErrorStack.join(ComposableError.stackDelimiter)}`
        });
    }
}
ComposableError.stackDelimiter = '\n    at ';
export class InvalidStringError extends ComposableError {
    constructor(expectation, innerError) {
        super(`Invalid string: "${expectation}"`, innerError);
    }
}
export class InvalidArgumentError extends CustomError {
    constructor(argName, message) {
        super(`Invalid argument '${argName}': ${message}`);
    }
}
export class InvalidStateError extends CustomError {
    constructor(message) {
        super(`Invalid state': ${message}`);
    }
}
//# sourceMappingURL=errors.js.map