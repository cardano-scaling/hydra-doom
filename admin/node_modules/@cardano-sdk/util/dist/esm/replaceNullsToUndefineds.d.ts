declare type KeysOfType<T, SelectedType> = {
    [key in keyof T]: SelectedType extends T[key] ? key : never;
}[keyof T];
declare type Optional<T> = Partial<Pick<T, KeysOfType<T, undefined>>>;
declare type Required<T> = Omit<T, KeysOfType<T, undefined>>;
export declare type OptionalUndefined<T> = Optional<T> & Required<T>;
export declare type RecursivelyReplaceNullWithUndefined<T> = T extends null ? undefined : T extends Date ? T : {
    [K in keyof T]: T[K] extends (infer U)[] ? RecursivelyReplaceNullWithUndefined<U>[] : RecursivelyReplaceNullWithUndefined<T[K]>;
};
export declare const replaceNullsWithUndefineds: <T extends {}>(obj: T) => RecursivelyReplaceNullWithUndefined<T>;
export {};
//# sourceMappingURL=replaceNullsToUndefineds.d.ts.map