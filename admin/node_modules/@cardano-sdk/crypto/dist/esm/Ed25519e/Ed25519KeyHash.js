var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Ed25519KeyHash_hash;
import { Ed25519KeyHashHex } from '../hexTypes.js';
import { InvalidArgumentError } from '@cardano-sdk/util';
export const ED25519_PUBLIC_KEY_HASH_LENGTH = 28;
export class Ed25519KeyHash {
    constructor(hash) {
        _Ed25519KeyHash_hash.set(this, void 0);
        __classPrivateFieldSet(this, _Ed25519KeyHash_hash, hash, "f");
    }
    static fromBytes(hash) {
        if (hash.length !== ED25519_PUBLIC_KEY_HASH_LENGTH)
            throw new InvalidArgumentError('hash', `Hash should be ${ED25519_PUBLIC_KEY_HASH_LENGTH} bytes; however ${hash.length} bytes were provided.`);
        return new Ed25519KeyHash(hash);
    }
    static fromHex(hash) {
        return Ed25519KeyHash.fromBytes(Buffer.from(hash, 'hex'));
    }
    bytes() {
        return __classPrivateFieldGet(this, _Ed25519KeyHash_hash, "f");
    }
    hex() {
        return Ed25519KeyHashHex(Buffer.from(__classPrivateFieldGet(this, _Ed25519KeyHash_hash, "f")).toString('hex'));
    }
}
_Ed25519KeyHash_hash = new WeakMap();
//# sourceMappingURL=Ed25519KeyHash.js.map