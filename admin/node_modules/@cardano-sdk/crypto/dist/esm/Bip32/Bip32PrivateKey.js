var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Bip32PrivateKey_key;
import * as Bip32KeyDerivation from './Bip32KeyDerivation.js';
import { Bip32PrivateKeyHex } from '../hexTypes.js';
import { Bip32PublicKey } from './Bip32PublicKey.js';
import { EXTENDED_ED25519_PRIVATE_KEY_LENGTH, Ed25519PrivateKey } from '../Ed25519e/index.js';
import { InvalidArgumentError } from '@cardano-sdk/util';
import { pbkdf2Sync } from 'pbkdf2';
import sodium from 'libsodium-wrappers-sumo';
const SCALAR_INDEX = 0;
const SCALAR_SIZE = 32;
const PBKDF2_ITERATIONS = 4096;
const PBKDF2_KEY_SIZE = 96;
const PBKDF2_DIGEST_ALGORITHM = 'sha512';
const CHAIN_CODE_INDEX = 64;
const CHAIN_CODE_SIZE = 32;
const clampScalar = (scalar) => {
    scalar[0] &= 248;
    scalar[31] &= 31;
    scalar[31] |= 64;
    return scalar;
};
const extendedScalar = (extendedKey) => extendedKey.slice(SCALAR_INDEX, SCALAR_SIZE);
export const BIP32_ED25519_PRIVATE_KEY_LENGTH = 96;
export class Bip32PrivateKey {
    constructor(key) {
        _Bip32PrivateKey_key.set(this, void 0);
        __classPrivateFieldSet(this, _Bip32PrivateKey_key, key, "f");
    }
    static fromBip39Entropy(entropy, password) {
        const xprv = pbkdf2Sync(password, entropy, PBKDF2_ITERATIONS, PBKDF2_KEY_SIZE, PBKDF2_DIGEST_ALGORITHM);
        return Bip32PrivateKey.fromBytes(clampScalar(xprv));
    }
    static fromBytes(key) {
        if (key.length !== BIP32_ED25519_PRIVATE_KEY_LENGTH)
            throw new InvalidArgumentError('key', `Key should be ${BIP32_ED25519_PRIVATE_KEY_LENGTH} bytes; however ${key.length} bytes were provided.`);
        return new Bip32PrivateKey(key);
    }
    static fromHex(key) {
        return Bip32PrivateKey.fromBytes(Buffer.from(key, 'hex'));
    }
    async derive(derivationIndices) {
        await sodium.ready;
        let key = Buffer.from(__classPrivateFieldGet(this, _Bip32PrivateKey_key, "f"));
        for (const index of derivationIndices) {
            key = Bip32KeyDerivation.derivePrivate(key, index);
        }
        return Bip32PrivateKey.fromBytes(key);
    }
    toRawKey() {
        return Ed25519PrivateKey.fromExtendedBytes(__classPrivateFieldGet(this, _Bip32PrivateKey_key, "f").slice(0, EXTENDED_ED25519_PRIVATE_KEY_LENGTH));
    }
    async toPublic() {
        await sodium.ready;
        const scalar = extendedScalar(__classPrivateFieldGet(this, _Bip32PrivateKey_key, "f").slice(0, EXTENDED_ED25519_PRIVATE_KEY_LENGTH));
        const publicKey = sodium.crypto_scalarmult_ed25519_base_noclamp(scalar);
        return Bip32PublicKey.fromBytes(Buffer.concat([publicKey, __classPrivateFieldGet(this, _Bip32PrivateKey_key, "f").slice(CHAIN_CODE_INDEX, CHAIN_CODE_INDEX + CHAIN_CODE_SIZE)]));
    }
    bytes() {
        return __classPrivateFieldGet(this, _Bip32PrivateKey_key, "f");
    }
    hex() {
        return Bip32PrivateKeyHex(Buffer.from(__classPrivateFieldGet(this, _Bip32PrivateKey_key, "f")).toString('hex'));
    }
}
_Bip32PrivateKey_key = new WeakMap();
//# sourceMappingURL=Bip32PrivateKey.js.map