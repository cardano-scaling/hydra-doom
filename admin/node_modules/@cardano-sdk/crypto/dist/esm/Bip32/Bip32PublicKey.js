var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Bip32PublicKey_key;
import * as Bip32KeyDerivation from './Bip32KeyDerivation.js';
import { BIP32_PUBLIC_KEY_HASH_LENGTH, Bip32PublicKeyHashHex, Bip32PublicKeyHex } from '../hexTypes.js';
import { ED25519_PUBLIC_KEY_LENGTH, Ed25519PublicKey } from '../Ed25519e/index.js';
import { InvalidArgumentError } from '@cardano-sdk/util';
import sodium from 'libsodium-wrappers-sumo';
export const BIP32_ED25519_PUBLIC_KEY_LENGTH = 64;
export class Bip32PublicKey {
    constructor(key) {
        _Bip32PublicKey_key.set(this, void 0);
        __classPrivateFieldSet(this, _Bip32PublicKey_key, key, "f");
    }
    static fromBytes(key) {
        if (key.length !== BIP32_ED25519_PUBLIC_KEY_LENGTH)
            throw new InvalidArgumentError('key', `Key should be ${BIP32_ED25519_PUBLIC_KEY_LENGTH} bytes; however ${key.length} bytes were provided.`);
        return new Bip32PublicKey(key);
    }
    static fromHex(key) {
        return Bip32PublicKey.fromBytes(Buffer.from(key, 'hex'));
    }
    toRawKey() {
        return Ed25519PublicKey.fromBytes(__classPrivateFieldGet(this, _Bip32PublicKey_key, "f").slice(0, ED25519_PUBLIC_KEY_LENGTH));
    }
    async derive(derivationIndices) {
        await sodium.ready;
        let key = Buffer.from(__classPrivateFieldGet(this, _Bip32PublicKey_key, "f"));
        for (const index of derivationIndices) {
            key = Bip32KeyDerivation.derivePublic(key, index);
        }
        return Bip32PublicKey.fromBytes(key);
    }
    bytes() {
        return __classPrivateFieldGet(this, _Bip32PublicKey_key, "f");
    }
    hex() {
        return Bip32PublicKeyHex(Buffer.from(__classPrivateFieldGet(this, _Bip32PublicKey_key, "f")).toString('hex'));
    }
    async hash() {
        await sodium.ready;
        const hash = sodium.crypto_generichash(BIP32_PUBLIC_KEY_HASH_LENGTH, __classPrivateFieldGet(this, _Bip32PublicKey_key, "f"));
        return Bip32PublicKeyHashHex(Buffer.from(hash).toString('hex'));
    }
}
_Bip32PublicKey_key = new WeakMap();
//# sourceMappingURL=Bip32PublicKey.js.map