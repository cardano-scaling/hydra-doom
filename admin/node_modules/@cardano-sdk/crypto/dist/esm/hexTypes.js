import { castHexBlob, typedHex } from '@cardano-sdk/util';
export const BIP32_PUBLIC_KEY_HASH_LENGTH = 28;
export const Ed25519SignatureHex = (value) => typedHex(value, 128);
export const Bip32PublicKeyHex = (key) => typedHex(key, 128);
export const Bip32PrivateKeyHex = (key) => typedHex(key, 192);
export const Ed25519PublicKeyHex = (value) => typedHex(value, 64);
export const Ed25519PrivateExtendedKeyHex = (value) => typedHex(value, 128);
export const Ed25519PrivateNormalKeyHex = (value) => typedHex(value, 64);
export const Ed25519KeyHashHex = (value) => typedHex(value, 56);
export const Bip32PublicKeyHashHex = (value) => typedHex(value, BIP32_PUBLIC_KEY_HASH_LENGTH * 2);
export const Hash32ByteBase16 = (value) => typedHex(value, 64);
Hash32ByteBase16.fromHexBlob = (value) => castHexBlob(value, 64);
export const Hash28ByteBase16 = (value) => typedHex(value, 56);
Hash28ByteBase16.fromEd25519KeyHashHex = (value) => value;
//# sourceMappingURL=hexTypes.js.map