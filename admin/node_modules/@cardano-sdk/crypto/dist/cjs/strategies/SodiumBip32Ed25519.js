"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SodiumBip32Ed25519 = void 0;
const Bip32_1 = require("../Bip32");
const Ed25519e_1 = require("../Ed25519e");
const EXTENDED_KEY_HEX_LENGTH = 128;
class SodiumBip32Ed25519 {
    fromBip39Entropy(entropy, passphrase) {
        return Bip32_1.Bip32PrivateKey.fromBip39Entropy(entropy, passphrase).hex();
    }
    async getPublicKey(privateKey) {
        const key = privateKey.length === EXTENDED_KEY_HEX_LENGTH
            ? Ed25519e_1.Ed25519PrivateKey.fromExtendedHex(privateKey)
            : Ed25519e_1.Ed25519PrivateKey.fromNormalHex(privateKey);
        return (await key.toPublic()).hex();
    }
    async getPubKeyHash(publicKey) {
        const pubKey = await Ed25519e_1.Ed25519PublicKey.fromHex(publicKey);
        return (await pubKey.hash()).hex();
    }
    async getRawPrivateKey(bip32PrivateKey) {
        return (await Bip32_1.Bip32PrivateKey.fromHex(bip32PrivateKey)).toRawKey().hex();
    }
    async getRawPublicKey(bip32PublicKey) {
        const pubKey = await Bip32_1.Bip32PublicKey.fromHex(bip32PublicKey);
        return (await pubKey.toRawKey()).hex();
    }
    async getBip32PublicKey(privateKey) {
        const privKey = await Bip32_1.Bip32PrivateKey.fromHex(privateKey);
        return (await privKey.toPublic()).hex();
    }
    async derivePrivateKey(parentKey, derivationIndices) {
        const privKey = await Bip32_1.Bip32PrivateKey.fromHex(parentKey);
        return (await privKey.derive(derivationIndices)).hex();
    }
    async derivePublicKey(parentKey, derivationIndices) {
        const pubKey = await Bip32_1.Bip32PublicKey.fromHex(parentKey);
        return (await pubKey.derive(derivationIndices)).hex();
    }
    async sign(privateKey, message) {
        const key = privateKey.length === EXTENDED_KEY_HEX_LENGTH
            ? Ed25519e_1.Ed25519PrivateKey.fromExtendedHex(privateKey)
            : Ed25519e_1.Ed25519PrivateKey.fromNormalHex(privateKey);
        return (await key.sign(message)).hex();
    }
    async verify(signature, message, publicKey) {
        const key = await Ed25519e_1.Ed25519PublicKey.fromHex(publicKey);
        return await key.verify(Ed25519e_1.Ed25519Signature.fromHex(signature), message);
    }
}
exports.SodiumBip32Ed25519 = SodiumBip32Ed25519;
//# sourceMappingURL=SodiumBip32Ed25519.js.map