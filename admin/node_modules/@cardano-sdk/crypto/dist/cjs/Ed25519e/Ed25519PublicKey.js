"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _Ed25519PublicKey_keyMaterial;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Ed25519PublicKey = exports.ED25519_PUBLIC_KEY_LENGTH = void 0;
const Ed25519KeyHash_1 = require("./Ed25519KeyHash");
const hexTypes_1 = require("../hexTypes");
const util_1 = require("@cardano-sdk/util");
const libsodium_wrappers_sumo_1 = __importDefault(require("libsodium-wrappers-sumo"));
exports.ED25519_PUBLIC_KEY_LENGTH = 32;
class Ed25519PublicKey {
    constructor(keyMaterial) {
        _Ed25519PublicKey_keyMaterial.set(this, void 0);
        __classPrivateFieldSet(this, _Ed25519PublicKey_keyMaterial, keyMaterial, "f");
    }
    async verify(signature, message) {
        await libsodium_wrappers_sumo_1.default.ready;
        return libsodium_wrappers_sumo_1.default.crypto_sign_verify_detached(signature.bytes(), Buffer.from(message, 'hex'), __classPrivateFieldGet(this, _Ed25519PublicKey_keyMaterial, "f"));
    }
    static fromBytes(keyMaterial) {
        if (keyMaterial.length !== exports.ED25519_PUBLIC_KEY_LENGTH)
            throw new util_1.InvalidArgumentError('keyMaterial', `Key should be ${exports.ED25519_PUBLIC_KEY_LENGTH} bytes; however ${keyMaterial.length} bytes were provided.`);
        return new Ed25519PublicKey(keyMaterial);
    }
    static fromHex(keyMaterial) {
        return Ed25519PublicKey.fromBytes(Buffer.from(keyMaterial, 'hex'));
    }
    async hash() {
        await libsodium_wrappers_sumo_1.default.ready;
        const hash = libsodium_wrappers_sumo_1.default.crypto_generichash(Ed25519KeyHash_1.ED25519_PUBLIC_KEY_HASH_LENGTH, __classPrivateFieldGet(this, _Ed25519PublicKey_keyMaterial, "f"));
        return Ed25519KeyHash_1.Ed25519KeyHash.fromBytes(hash);
    }
    bytes() {
        return __classPrivateFieldGet(this, _Ed25519PublicKey_keyMaterial, "f");
    }
    hex() {
        return (0, hexTypes_1.Ed25519PublicKeyHex)(Buffer.from(__classPrivateFieldGet(this, _Ed25519PublicKey_keyMaterial, "f")).toString('hex'));
    }
}
exports.Ed25519PublicKey = Ed25519PublicKey;
_Ed25519PublicKey_keyMaterial = new WeakMap();
//# sourceMappingURL=Ed25519PublicKey.js.map