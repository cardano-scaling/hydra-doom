"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _Bip32PublicKey_key;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Bip32PublicKey = exports.BIP32_ED25519_PUBLIC_KEY_LENGTH = void 0;
const Bip32KeyDerivation = __importStar(require("./Bip32KeyDerivation"));
const hexTypes_1 = require("../hexTypes");
const Ed25519e_1 = require("../Ed25519e");
const util_1 = require("@cardano-sdk/util");
const libsodium_wrappers_sumo_1 = __importDefault(require("libsodium-wrappers-sumo"));
exports.BIP32_ED25519_PUBLIC_KEY_LENGTH = 64;
class Bip32PublicKey {
    constructor(key) {
        _Bip32PublicKey_key.set(this, void 0);
        __classPrivateFieldSet(this, _Bip32PublicKey_key, key, "f");
    }
    static fromBytes(key) {
        if (key.length !== exports.BIP32_ED25519_PUBLIC_KEY_LENGTH)
            throw new util_1.InvalidArgumentError('key', `Key should be ${exports.BIP32_ED25519_PUBLIC_KEY_LENGTH} bytes; however ${key.length} bytes were provided.`);
        return new Bip32PublicKey(key);
    }
    static fromHex(key) {
        return Bip32PublicKey.fromBytes(Buffer.from(key, 'hex'));
    }
    toRawKey() {
        return Ed25519e_1.Ed25519PublicKey.fromBytes(__classPrivateFieldGet(this, _Bip32PublicKey_key, "f").slice(0, Ed25519e_1.ED25519_PUBLIC_KEY_LENGTH));
    }
    async derive(derivationIndices) {
        await libsodium_wrappers_sumo_1.default.ready;
        let key = Buffer.from(__classPrivateFieldGet(this, _Bip32PublicKey_key, "f"));
        for (const index of derivationIndices) {
            key = Bip32KeyDerivation.derivePublic(key, index);
        }
        return Bip32PublicKey.fromBytes(key);
    }
    bytes() {
        return __classPrivateFieldGet(this, _Bip32PublicKey_key, "f");
    }
    hex() {
        return (0, hexTypes_1.Bip32PublicKeyHex)(Buffer.from(__classPrivateFieldGet(this, _Bip32PublicKey_key, "f")).toString('hex'));
    }
    async hash() {
        await libsodium_wrappers_sumo_1.default.ready;
        const hash = libsodium_wrappers_sumo_1.default.crypto_generichash(hexTypes_1.BIP32_PUBLIC_KEY_HASH_LENGTH, __classPrivateFieldGet(this, _Bip32PublicKey_key, "f"));
        return (0, hexTypes_1.Bip32PublicKeyHashHex)(Buffer.from(hash).toString('hex'));
    }
}
exports.Bip32PublicKey = Bip32PublicKey;
_Bip32PublicKey_key = new WeakMap();
//# sourceMappingURL=Bip32PublicKey.js.map