import { HexBlob, OpaqueString } from '@cardano-sdk/util';
export declare const BIP32_PUBLIC_KEY_HASH_LENGTH = 28;
export declare type Ed25519SignatureHex = OpaqueString<'Ed25519SignatureHex'>;
export declare const Ed25519SignatureHex: (value: string) => Ed25519SignatureHex;
export declare type Bip32PublicKeyHex = OpaqueString<'Bip32PublicKeyHex'>;
export declare const Bip32PublicKeyHex: (key: string) => Bip32PublicKeyHex;
export declare type Bip32PrivateKeyHex = OpaqueString<'Bip32PrivateKeyHex'>;
export declare const Bip32PrivateKeyHex: (key: string) => Bip32PrivateKeyHex;
export declare type Ed25519PublicKeyHex = OpaqueString<'Ed25519PublicKeyHex'>;
export declare const Ed25519PublicKeyHex: (value: string) => Ed25519PublicKeyHex;
export declare type Ed25519PrivateExtendedKeyHex = OpaqueString<'Ed25519PrivateKeyHex'>;
export declare const Ed25519PrivateExtendedKeyHex: (value: string) => Ed25519PrivateExtendedKeyHex;
export declare type Ed25519PrivateNormalKeyHex = OpaqueString<'Ed25519PrivateKeyHex'>;
export declare const Ed25519PrivateNormalKeyHex: (value: string) => Ed25519PrivateNormalKeyHex;
export declare type Ed25519KeyHashHex = OpaqueString<'Ed25519KeyHashHex'>;
export declare const Ed25519KeyHashHex: (value: string) => Ed25519KeyHashHex;
export declare type Bip32PublicKeyHashHex = OpaqueString<'Bip32PublicKeyHashHex'>;
export declare const Bip32PublicKeyHashHex: (value: string) => Bip32PublicKeyHashHex;
export declare type Hash32ByteBase16 = OpaqueString<'Hash32ByteBase16'>;
export declare const Hash32ByteBase16: {
    (value: string): Hash32ByteBase16;
    fromHexBlob<T>(value: HexBlob): T;
};
export declare type Hash28ByteBase16 = OpaqueString<'Hash28ByteBase16'>;
export declare const Hash28ByteBase16: {
    (value: string): Hash28ByteBase16;
    fromEd25519KeyHashHex(value: Ed25519KeyHashHex): Hash28ByteBase16;
};
//# sourceMappingURL=hexTypes.d.ts.map