"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.subtractTokenMaps = exports.subtractMaps = void 0;
const uniq_js_1 = __importDefault(require("lodash/uniq.js"));
const subtractMaps = (lhs, rhs) => {
    if (!rhs) {
        if (!lhs)
            return undefined;
        const nonEmptyValues = new Map();
        for (const [key, value] of lhs.entries()) {
            if (value !== 0n)
                nonEmptyValues.set(key, value);
        }
        return nonEmptyValues;
    }
    if (!lhs) {
        const negativeValues = new Map();
        for (const [key, value] of rhs.entries()) {
            if (value !== 0n)
                negativeValues.set(key, -value);
        }
        return negativeValues;
    }
    const result = new Map();
    const intersection = new Array();
    for (const [key, value] of lhs.entries()) {
        if (rhs.has(key)) {
            intersection.push(key);
            continue;
        }
        if (value !== 0n)
            result.set(key, value);
    }
    for (const [key, value] of rhs.entries()) {
        if (lhs.has(key)) {
            intersection.push(key);
            continue;
        }
        if (value !== 0n)
            result.set(key, -value);
    }
    const uniqIntersection = (0, uniq_js_1.default)(intersection);
    for (const id of uniqIntersection) {
        const lshVal = lhs.get(id);
        const rshVal = rhs.get(id);
        const remainingCoins = lshVal - rshVal;
        if (remainingCoins !== 0n)
            result.set(id, remainingCoins);
    }
    return result;
};
exports.subtractMaps = subtractMaps;
const subtractTokenMaps = (assets) => {
    if (!assets || assets.length === 0)
        return undefined;
    return assets.reduce(exports.subtractMaps);
};
exports.subtractTokenMaps = subtractTokenMaps;
//# sourceMappingURL=subtractTokenMaps.js.map