"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AssetFingerprint = exports.PolicyId = exports.AssetId = exports.AssetName = void 0;
const Crypto = __importStar(require("@cardano-sdk/crypto"));
const util_1 = require("@cardano-sdk/util");
const web_encoding_1 = require("web-encoding");
const AssetName = (value) => {
    if (value.length > 0) {
        (0, util_1.assertIsHexString)(value);
        if (value.length > 64) {
            throw new util_1.InvalidStringError('too long');
        }
    }
    return value.toLowerCase();
};
exports.AssetName = AssetName;
const utf8Decoder = new web_encoding_1.TextDecoder('utf8', { fatal: true });
exports.AssetName.toUTF8 = (assetName, stripInvisibleCharacters = false) => {
    const assetNameBuffer = Buffer.from(assetName, 'hex');
    try {
        if (stripInvisibleCharacters) {
            return utf8Decoder.decode(assetNameBuffer.filter((v) => v > 31));
        }
        return utf8Decoder.decode(assetNameBuffer);
    }
    catch (error) {
        throw new util_1.InvalidStringError(`Cannot convert AssetName '${assetName}' to UTF8`, error);
    }
};
const AssetId = (value) => {
    const normalizedValue = value.split('.').join('');
    (0, util_1.assertIsHexString)(normalizedValue);
    if (normalizedValue.length > 120)
        throw new util_1.InvalidStringError('too long');
    if (normalizedValue.length < 56)
        throw new util_1.InvalidStringError('too short');
    return normalizedValue;
};
exports.AssetId = AssetId;
const PolicyId = (value) => Crypto.Hash28ByteBase16(value);
exports.PolicyId = PolicyId;
exports.AssetId.getPolicyId = (id) => (0, exports.PolicyId)(id.slice(0, 56));
exports.AssetId.getAssetName = (id) => (0, exports.AssetName)(id.slice(56));
exports.AssetId.fromParts = (policyId, assetName) => (0, exports.AssetId)(policyId + assetName);
const AssetFingerprint = (value) => (0, util_1.typedBech32)(value, 'asset', 32);
exports.AssetFingerprint = AssetFingerprint;
exports.AssetFingerprint.fromParts = (policyId, assetName) => {
    const policyBuf = Buffer.from(policyId, 'hex');
    const assetNameBuf = Buffer.from(assetName, 'hex');
    const hexDigest = (0, util_1.HexBlob)(Crypto.blake2b(20)
        .update(new Uint8Array([...policyBuf, ...assetNameBuf]))
        .digest('hex'));
    return (0, exports.AssetFingerprint)(util_1.HexBlob.toTypedBech32('asset', hexDigest));
};
//# sourceMappingURL=Asset.js.map