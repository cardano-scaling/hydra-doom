"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.includesAnyCertificate = exports.stakeKeyCertificates = exports.createDelegationCert = exports.createStakeDeregistrationCert = exports.createStakeRegistrationCert = exports.isCertType = exports.VoteDelegationCredentialCertificateTypes = exports.StakeCredentialCertificateTypes = exports.RegAndDeregCertificateTypes = exports.StakeDelegationCertificateTypes = exports.StakeRegistrationCertificateTypes = exports.PostConwayStakeRegistrationCertificateTypes = exports.MirCertificateKind = exports.MirCertificatePot = exports.CertificateType = void 0;
const Address_1 = require("../Address");
const crypto_1 = require("@cardano-sdk/crypto");
const util_1 = require("@cardano-sdk/util");
var CertificateType;
(function (CertificateType) {
    CertificateType["StakeRegistration"] = "StakeRegistrationCertificate";
    CertificateType["StakeDeregistration"] = "StakeDeregistrationCertificate";
    CertificateType["PoolRegistration"] = "PoolRegistrationCertificate";
    CertificateType["PoolRetirement"] = "PoolRetirementCertificate";
    CertificateType["StakeDelegation"] = "StakeDelegationCertificate";
    CertificateType["MIR"] = "MirCertificate";
    CertificateType["GenesisKeyDelegation"] = "GenesisKeyDelegationCertificate";
    CertificateType["Registration"] = "RegistrationCertificate";
    CertificateType["Unregistration"] = "UnRegistrationCertificate";
    CertificateType["VoteDelegation"] = "VoteDelegationCertificate";
    CertificateType["StakeVoteDelegation"] = "StakeVoteDelegationCertificate";
    CertificateType["StakeRegistrationDelegation"] = "StakeRegistrationDelegateCertificate";
    CertificateType["VoteRegistrationDelegation"] = "VoteRegistrationDelegateCertificate";
    CertificateType["StakeVoteRegistrationDelegation"] = "StakeVoteRegistrationDelegateCertificate";
    CertificateType["AuthorizeCommitteeHot"] = "AuthorizeCommitteeHotCertificate";
    CertificateType["ResignCommitteeCold"] = "ResignCommitteeColdCertificate";
    CertificateType["RegisterDelegateRepresentative"] = "RegisterDelegateRepresentativeCertificate";
    CertificateType["UnregisterDelegateRepresentative"] = "UnregisterDelegateRepresentativeCertificate";
    CertificateType["UpdateDelegateRepresentative"] = "UpdateDelegateRepresentativeCertificate";
})(CertificateType = exports.CertificateType || (exports.CertificateType = {}));
var MirCertificatePot;
(function (MirCertificatePot) {
    MirCertificatePot["Reserves"] = "reserve";
    MirCertificatePot["Treasury"] = "treasury";
})(MirCertificatePot = exports.MirCertificatePot || (exports.MirCertificatePot = {}));
var MirCertificateKind;
(function (MirCertificateKind) {
    MirCertificateKind["ToOtherPot"] = "toOtherPot";
    MirCertificateKind["ToStakeCreds"] = "ToStakeCreds";
})(MirCertificateKind = exports.MirCertificateKind || (exports.MirCertificateKind = {}));
exports.PostConwayStakeRegistrationCertificateTypes = [
    CertificateType.Registration,
    CertificateType.VoteRegistrationDelegation,
    CertificateType.StakeRegistrationDelegation,
    CertificateType.StakeVoteRegistrationDelegation
];
exports.StakeRegistrationCertificateTypes = [
    CertificateType.StakeRegistration,
    ...exports.PostConwayStakeRegistrationCertificateTypes
];
exports.StakeDelegationCertificateTypes = [
    CertificateType.StakeDelegation,
    CertificateType.StakeVoteDelegation,
    CertificateType.StakeRegistrationDelegation,
    CertificateType.StakeVoteRegistrationDelegation
];
exports.RegAndDeregCertificateTypes = [
    ...exports.StakeRegistrationCertificateTypes,
    CertificateType.Unregistration,
    CertificateType.StakeDeregistration
];
exports.StakeCredentialCertificateTypes = [
    ...exports.RegAndDeregCertificateTypes,
    ...exports.StakeDelegationCertificateTypes,
    CertificateType.VoteDelegation
];
exports.VoteDelegationCredentialCertificateTypes = [
    CertificateType.VoteDelegation,
    CertificateType.VoteRegistrationDelegation,
    CertificateType.StakeVoteDelegation,
    CertificateType.StakeVoteRegistrationDelegation
];
const isCertType = (certificate, certificateTypes) => certificateTypes.includes(certificate.__typename);
exports.isCertType = isCertType;
const createStakeRegistrationCert = (rewardAccount) => ({
    __typename: CertificateType.StakeRegistration,
    stakeCredential: {
        hash: crypto_1.Hash28ByteBase16.fromEd25519KeyHashHex(Address_1.RewardAccount.toHash(rewardAccount)),
        type: Address_1.CredentialType.KeyHash
    }
});
exports.createStakeRegistrationCert = createStakeRegistrationCert;
const createStakeDeregistrationCert = (rewardAccount, deposit) => deposit === undefined
    ? {
        __typename: CertificateType.StakeDeregistration,
        stakeCredential: {
            hash: crypto_1.Hash28ByteBase16.fromEd25519KeyHashHex(Address_1.RewardAccount.toHash(rewardAccount)),
            type: Address_1.CredentialType.KeyHash
        }
    }
    : {
        __typename: CertificateType.Unregistration,
        deposit,
        stakeCredential: {
            hash: crypto_1.Hash28ByteBase16.fromEd25519KeyHashHex(Address_1.RewardAccount.toHash(rewardAccount)),
            type: Address_1.CredentialType.KeyHash
        }
    };
exports.createStakeDeregistrationCert = createStakeDeregistrationCert;
const createDelegationCert = (rewardAccount, poolId) => ({
    __typename: CertificateType.StakeDelegation,
    poolId,
    stakeCredential: {
        hash: crypto_1.Hash28ByteBase16.fromEd25519KeyHashHex(Address_1.RewardAccount.toHash(rewardAccount)),
        type: Address_1.CredentialType.KeyHash
    }
});
exports.createDelegationCert = createDelegationCert;
const stakeKeyCertificates = (certificates) => certificates?.map((cert) => ((0, exports.isCertType)(cert, exports.RegAndDeregCertificateTypes) ? cert : undefined)).filter(util_1.isNotNil) ||
    [];
exports.stakeKeyCertificates = stakeKeyCertificates;
const includesAnyCertificate = (haystack, needle) => haystack.some(({ __typename }) => needle.includes(__typename)) || false;
exports.includesAnyCertificate = includesAnyCertificate;
//# sourceMappingURL=Certificate.js.map