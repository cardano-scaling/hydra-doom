"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Cip1854ExtendedAccountPublicKey = void 0;
const BaseEncoding = __importStar(require("@scure/base"));
const crypto_1 = require("@cardano-sdk/crypto");
const util_1 = require("@cardano-sdk/util");
const MAX_BECH32_LENGTH_LIMIT = 1023;
const bip32PublicKeyPrefix = 'acct_shared_xvk';
const Cip1854ExtendedAccountPublicKey = (value) => {
    try {
        (0, util_1.assertIsBech32WithPrefix)(value, [bip32PublicKeyPrefix]);
    }
    catch {
        throw new util_1.InvalidStringError(value, 'Expected key to be a bech32 encoded string');
    }
    return value;
};
exports.Cip1854ExtendedAccountPublicKey = Cip1854ExtendedAccountPublicKey;
exports.Cip1854ExtendedAccountPublicKey.fromBip32PublicKeyHex = (value) => {
    const words = BaseEncoding.bech32.toWords(Buffer.from(value, 'hex'));
    return (0, exports.Cip1854ExtendedAccountPublicKey)(BaseEncoding.bech32.encode(bip32PublicKeyPrefix, words, MAX_BECH32_LENGTH_LIMIT));
};
exports.Cip1854ExtendedAccountPublicKey.toBip32PublicKeyHex = (value) => {
    const { words } = BaseEncoding.bech32.decode(value, MAX_BECH32_LENGTH_LIMIT);
    return (0, crypto_1.Bip32PublicKeyHex)(Buffer.from(BaseEncoding.bech32.fromWords(words)).toString('hex'));
};
//# sourceMappingURL=Cip1854ExtendedAccountPublicKey.js.map