"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SlotLeader = exports.GenesisDelegate = exports.VrfVkBech32 = exports.BlockId = exports.Slot = exports.EpochNo = exports.BlockNo = exports.BlockSize = void 0;
const BaseEncoding = __importStar(require("@scure/base"));
const Crypto = __importStar(require("@cardano-sdk/crypto"));
const util_1 = require("@cardano-sdk/util");
const primitives_1 = require("./StakePool/primitives");
const BlockSize = (value) => value;
exports.BlockSize = BlockSize;
const BlockNo = (value) => value;
exports.BlockNo = BlockNo;
const EpochNo = (value) => value;
exports.EpochNo = EpochNo;
const Slot = (value) => value;
exports.Slot = Slot;
const BlockId = (value) => Crypto.Hash32ByteBase16(value);
exports.BlockId = BlockId;
const VrfVkBech32 = (value) => (0, util_1.typedBech32)(value, 'vrf_vk', 52);
exports.VrfVkBech32 = VrfVkBech32;
const GenesisDelegate = (value) => {
    if (/ShelleyGenesis-[\da-f]{16}/.test(value)) {
        return value;
    }
    return Crypto.Hash28ByteBase16(value);
};
exports.GenesisDelegate = GenesisDelegate;
const SlotLeader = (value) => {
    try {
        return (0, primitives_1.PoolId)(value);
    }
    catch {
        try {
            return (0, exports.GenesisDelegate)(value);
        }
        catch (error) {
            throw new util_1.InvalidStringError('Expected either PoolId or GenesisDelegate', error);
        }
    }
};
exports.SlotLeader = SlotLeader;
exports.VrfVkBech32.fromHex = (value) => {
    const words = BaseEncoding.bech32.toWords(Buffer.from(value, 'hex'));
    return (0, exports.VrfVkBech32)(BaseEncoding.bech32.encode('vrf_vk', words, 1023));
};
//# sourceMappingURL=Block.js.map