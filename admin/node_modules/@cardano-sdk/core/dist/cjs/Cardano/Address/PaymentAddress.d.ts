import { DRepID } from './DRepID';
import { OpaqueString } from '@cardano-sdk/util';
import type { HydratedTx, Tx } from '../types/Transaction';
import type { HydratedTxIn, TxIn, TxOut } from '../types/Utxo';
import type { NetworkId } from '../ChainId';
import type { RewardAccount } from './RewardAccount';
export declare type PaymentAddress = OpaqueString<'PaymentAddress'>;
export declare const isRewardAccount: (address: string) => boolean;
export declare const PaymentAddress: (value: string) => PaymentAddress;
export declare const isAddressWithin: (addresses: PaymentAddress[]) => ({ address }: {
    address: PaymentAddress;
}) => boolean;
export declare const inputsWithAddresses: (tx: HydratedTx, ownAddresses: PaymentAddress[]) => HydratedTxIn[];
export declare type ResolveOptions = {
    hints: Tx[];
};
export declare type ResolveInput = (txIn: TxIn, options?: ResolveOptions) => Promise<TxOut | null>;
export interface InputResolver {
    resolveInput: ResolveInput;
}
export declare const addressNetworkId: (address: RewardAccount | PaymentAddress | DRepID) => NetworkId;
//# sourceMappingURL=PaymentAddress.d.ts.map