"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _ProposedProtocolParameterUpdates_proposedUpdates, _ProposedProtocolParameterUpdates_originalBytes;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProposedProtocolParameterUpdates = void 0;
const Crypto = __importStar(require("@cardano-sdk/crypto"));
const CBOR_1 = require("../CBOR");
const util_1 = require("@cardano-sdk/util");
const ProtocolParamUpdate_1 = require("./ProtocolParamUpdate");
class ProposedProtocolParameterUpdates {
    constructor(proposedUpdates) {
        _ProposedProtocolParameterUpdates_proposedUpdates.set(this, new Map());
        _ProposedProtocolParameterUpdates_originalBytes.set(this, undefined);
        __classPrivateFieldSet(this, _ProposedProtocolParameterUpdates_proposedUpdates, proposedUpdates, "f");
    }
    toCbor() {
        const writer = new CBOR_1.CborWriter();
        if (__classPrivateFieldGet(this, _ProposedProtocolParameterUpdates_originalBytes, "f"))
            return __classPrivateFieldGet(this, _ProposedProtocolParameterUpdates_originalBytes, "f");
        const sortedCanonically = new Map([...__classPrivateFieldGet(this, _ProposedProtocolParameterUpdates_proposedUpdates, "f")].sort((a, b) => (a > b ? 1 : -1)));
        writer.writeStartMap(sortedCanonically.size);
        for (const [key, value] of sortedCanonically) {
            writer.writeByteString(Buffer.from(key, 'hex'));
            writer.writeEncodedValue(Buffer.from(value.toCbor(), 'hex'));
        }
        return writer.encodeAsHex();
    }
    static fromCbor(cbor) {
        const reader = new CBOR_1.CborReader(cbor);
        const proposedUpdates = new Map();
        reader.readStartMap();
        while (reader.peekState() !== CBOR_1.CborReaderState.EndMap) {
            const genesisHash = Crypto.Hash28ByteBase16(util_1.HexBlob.fromBytes(reader.readByteString()));
            const params = ProtocolParamUpdate_1.ProtocolParamUpdate.fromCbor(util_1.HexBlob.fromBytes(reader.readEncodedValue()));
            proposedUpdates.set(genesisHash, params);
        }
        reader.readEndMap();
        const updates = new ProposedProtocolParameterUpdates(proposedUpdates);
        __classPrivateFieldSet(updates, _ProposedProtocolParameterUpdates_originalBytes, cbor, "f");
        return updates;
    }
    toCore() {
        return new Map([...__classPrivateFieldGet(this, _ProposedProtocolParameterUpdates_proposedUpdates, "f")].map(([key, value]) => [key, value.toCore()]));
    }
    static fromCore(updates) {
        return new ProposedProtocolParameterUpdates(new Map([...updates].map(([key, value]) => [key, ProtocolParamUpdate_1.ProtocolParamUpdate.fromCore(value)])));
    }
    size() {
        return __classPrivateFieldGet(this, _ProposedProtocolParameterUpdates_proposedUpdates, "f").size;
    }
    insert(key, value) {
        __classPrivateFieldGet(this, _ProposedProtocolParameterUpdates_proposedUpdates, "f").set(key, value);
    }
    get(key) {
        return __classPrivateFieldGet(this, _ProposedProtocolParameterUpdates_proposedUpdates, "f").get(key);
    }
    keys() {
        return [...__classPrivateFieldGet(this, _ProposedProtocolParameterUpdates_proposedUpdates, "f").keys()];
    }
}
exports.ProposedProtocolParameterUpdates = ProposedProtocolParameterUpdates;
_ProposedProtocolParameterUpdates_proposedUpdates = new WeakMap(), _ProposedProtocolParameterUpdates_originalBytes = new WeakMap();
//# sourceMappingURL=ProposedProtocolParameterUpdates.js.map