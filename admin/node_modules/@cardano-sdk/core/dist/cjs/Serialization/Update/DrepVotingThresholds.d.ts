import { HexBlob } from '@cardano-sdk/util';
import { UnitInterval } from '../Common';
import type * as Cardano from '../../Cardano';
export declare class DrepVotingThresholds {
    #private;
    constructor(motionNoConfidence: UnitInterval, committeeNormal: UnitInterval, committeeNoConfidence: UnitInterval, updateConstitution: UnitInterval, hardForkInitiation: UnitInterval, ppNetworkGroup: UnitInterval, ppEconomicGroup: UnitInterval, ppTechnicalGroup: UnitInterval, ppGovernanceGroup: UnitInterval, treasuryWithdrawal: UnitInterval);
    toCbor(): HexBlob;
    static fromCbor(cbor: HexBlob): DrepVotingThresholds;
    toCore(): Cardano.DelegateRepresentativeThresholds;
    static fromCore(core: Cardano.DelegateRepresentativeThresholds): DrepVotingThresholds;
    setMotionNoConfidence(threshold: UnitInterval): void;
    setCommitteeNormal(threshold: UnitInterval): void;
    setCommitteeNoConfidence(threshold: UnitInterval): void;
    setUpdateConstitution(threshold: UnitInterval): void;
    setHardForkInitiation(threshold: UnitInterval): void;
    setPpNetworkGroup(threshold: UnitInterval): void;
    setPpEconomicGroup(threshold: UnitInterval): void;
    setPpTechnicalGroup(threshold: UnitInterval): void;
    setPpGovernanceGroup(threshold: UnitInterval): void;
    setTreasuryWithdrawal(threshold: UnitInterval): void;
    motionNoConfidence(): UnitInterval;
    committeeNormal(): UnitInterval;
    committeeNoConfidence(): UnitInterval;
    updateConstitution(): UnitInterval;
    hardForkInitiation(): UnitInterval;
    ppNetworkGroup(): UnitInterval;
    ppEconomicGroup(): UnitInterval;
    ppTechnicalGroup(): UnitInterval;
    ppGovernanceGroup(): UnitInterval;
    treasuryWithdrawal(): UnitInterval;
}
//# sourceMappingURL=DrepVotingThresholds.d.ts.map