"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var _NativeScript_scriptAll, _NativeScript_scriptAny, _NativeScript_scripNOfK, _NativeScript_scriptPubKey, _NativeScript_timelockExpiry, _NativeScript_timelockStart, _NativeScript_kind, _NativeScript_originalBytes;
Object.defineProperty(exports, "__esModule", { value: true });
exports.NativeScript = void 0;
const Crypto = __importStar(require("@cardano-sdk/crypto"));
const CBOR_1 = require("../../CBOR");
const util_1 = require("@cardano-sdk/util");
const Script_1 = require("../../../Cardano/types/Script");
const ScriptAll_1 = require("./ScriptAll");
const ScriptAny_1 = require("./ScriptAny");
const ScriptNOfK_1 = require("./ScriptNOfK");
const ScriptPubkey_1 = require("./ScriptPubkey");
const TimelockExpiry_1 = require("./TimelockExpiry");
const TimelockStart_1 = require("./TimelockStart");
const HASH_LENGTH_IN_BYTES = 28;
class NativeScript {
    constructor() {
        _NativeScript_scriptAll.set(this, void 0);
        _NativeScript_scriptAny.set(this, void 0);
        _NativeScript_scripNOfK.set(this, void 0);
        _NativeScript_scriptPubKey.set(this, void 0);
        _NativeScript_timelockExpiry.set(this, void 0);
        _NativeScript_timelockStart.set(this, void 0);
        _NativeScript_kind.set(this, void 0);
        _NativeScript_originalBytes.set(this, undefined);
    }
    toCbor() {
        if (__classPrivateFieldGet(this, _NativeScript_originalBytes, "f"))
            return __classPrivateFieldGet(this, _NativeScript_originalBytes, "f");
        let cbor;
        switch (__classPrivateFieldGet(this, _NativeScript_kind, "f")) {
            case Script_1.NativeScriptKind.RequireSignature:
                cbor = __classPrivateFieldGet(this, _NativeScript_scriptPubKey, "f").toCbor();
                break;
            case Script_1.NativeScriptKind.RequireAllOf:
                cbor = __classPrivateFieldGet(this, _NativeScript_scriptAll, "f").toCbor();
                break;
            case Script_1.NativeScriptKind.RequireAnyOf:
                cbor = __classPrivateFieldGet(this, _NativeScript_scriptAny, "f").toCbor();
                break;
            case Script_1.NativeScriptKind.RequireNOf:
                cbor = __classPrivateFieldGet(this, _NativeScript_scripNOfK, "f").toCbor();
                break;
            case Script_1.NativeScriptKind.RequireTimeAfter:
                cbor = __classPrivateFieldGet(this, _NativeScript_timelockStart, "f").toCbor();
                break;
            case Script_1.NativeScriptKind.RequireTimeBefore:
                cbor = __classPrivateFieldGet(this, _NativeScript_timelockExpiry, "f").toCbor();
                break;
            default:
                throw new util_1.InvalidStateError(`Unexpected kind value: ${__classPrivateFieldGet(this, _NativeScript_kind, "f")}`);
        }
        return cbor;
    }
    static fromCbor(cbor) {
        let nativeScript;
        const reader = new CBOR_1.CborReader(cbor);
        reader.readStartArray();
        const kind = Number(reader.readInt());
        switch (kind) {
            case Script_1.NativeScriptKind.RequireSignature:
                nativeScript = NativeScript.newScriptPubkey(ScriptPubkey_1.ScriptPubkey.fromCbor(cbor));
                break;
            case Script_1.NativeScriptKind.RequireAllOf:
                nativeScript = NativeScript.newScriptAll(ScriptAll_1.ScriptAll.fromCbor(cbor));
                break;
            case Script_1.NativeScriptKind.RequireAnyOf:
                nativeScript = NativeScript.newScriptAny(ScriptAny_1.ScriptAny.fromCbor(cbor));
                break;
            case Script_1.NativeScriptKind.RequireNOf:
                nativeScript = NativeScript.newScriptNOfK(ScriptNOfK_1.ScriptNOfK.fromCbor(cbor));
                break;
            case Script_1.NativeScriptKind.RequireTimeAfter:
                nativeScript = NativeScript.newTimelockStart(TimelockStart_1.TimelockStart.fromCbor(cbor));
                break;
            case Script_1.NativeScriptKind.RequireTimeBefore:
                nativeScript = NativeScript.newTimelockExpiry(TimelockExpiry_1.TimelockExpiry.fromCbor(cbor));
                break;
            default:
                throw new util_1.InvalidStateError(`Unexpected kind value: ${kind}`);
        }
        __classPrivateFieldSet(nativeScript, _NativeScript_originalBytes, cbor, "f");
        return nativeScript;
    }
    toCore() {
        let core;
        switch (__classPrivateFieldGet(this, _NativeScript_kind, "f")) {
            case Script_1.NativeScriptKind.RequireSignature:
                core = __classPrivateFieldGet(this, _NativeScript_scriptPubKey, "f").toCore();
                break;
            case Script_1.NativeScriptKind.RequireAllOf:
                core = __classPrivateFieldGet(this, _NativeScript_scriptAll, "f").toCore();
                break;
            case Script_1.NativeScriptKind.RequireAnyOf:
                core = __classPrivateFieldGet(this, _NativeScript_scriptAny, "f").toCore();
                break;
            case Script_1.NativeScriptKind.RequireNOf:
                core = __classPrivateFieldGet(this, _NativeScript_scripNOfK, "f").toCore();
                break;
            case Script_1.NativeScriptKind.RequireTimeAfter:
                core = __classPrivateFieldGet(this, _NativeScript_timelockStart, "f").toCore();
                break;
            case Script_1.NativeScriptKind.RequireTimeBefore:
                core = __classPrivateFieldGet(this, _NativeScript_timelockExpiry, "f").toCore();
                break;
            default:
                throw new util_1.InvalidStateError(`Unexpected kind value: ${__classPrivateFieldGet(this, _NativeScript_kind, "f")}`);
        }
        return core;
    }
    static fromCore(script) {
        let nativeScript;
        switch (script.kind) {
            case Script_1.NativeScriptKind.RequireSignature:
                nativeScript = NativeScript.newScriptPubkey(ScriptPubkey_1.ScriptPubkey.fromCore(script));
                break;
            case Script_1.NativeScriptKind.RequireAllOf:
                nativeScript = NativeScript.newScriptAll(ScriptAll_1.ScriptAll.fromCore(script));
                break;
            case Script_1.NativeScriptKind.RequireAnyOf:
                nativeScript = NativeScript.newScriptAny(ScriptAny_1.ScriptAny.fromCore(script));
                break;
            case Script_1.NativeScriptKind.RequireNOf:
                nativeScript = NativeScript.newScriptNOfK(ScriptNOfK_1.ScriptNOfK.fromCore(script));
                break;
            case Script_1.NativeScriptKind.RequireTimeAfter:
                nativeScript = NativeScript.newTimelockStart(TimelockStart_1.TimelockStart.fromCore(script));
                break;
            case Script_1.NativeScriptKind.RequireTimeBefore:
                nativeScript = NativeScript.newTimelockExpiry(TimelockExpiry_1.TimelockExpiry.fromCore(script));
                break;
            default:
                throw new util_1.InvalidStateError('Unexpected kind value');
        }
        return nativeScript;
    }
    hash() {
        const bytes = `00${this.toCbor()}`;
        const hash = Crypto.blake2b(HASH_LENGTH_IN_BYTES).update(Buffer.from(bytes, 'hex')).digest();
        return Crypto.Hash28ByteBase16(util_1.HexBlob.fromBytes(hash));
    }
    kind() {
        return __classPrivateFieldGet(this, _NativeScript_kind, "f");
    }
    static newScriptPubkey(scriptPubkey) {
        const script = new NativeScript();
        __classPrivateFieldSet(script, _NativeScript_scriptPubKey, scriptPubkey, "f");
        __classPrivateFieldSet(script, _NativeScript_kind, Script_1.NativeScriptKind.RequireSignature, "f");
        return script;
    }
    static newScriptAll(scriptAll) {
        const script = new NativeScript();
        __classPrivateFieldSet(script, _NativeScript_scriptAll, scriptAll, "f");
        __classPrivateFieldSet(script, _NativeScript_kind, Script_1.NativeScriptKind.RequireAllOf, "f");
        return script;
    }
    static newScriptAny(scriptAny) {
        const script = new NativeScript();
        __classPrivateFieldSet(script, _NativeScript_scriptAny, scriptAny, "f");
        __classPrivateFieldSet(script, _NativeScript_kind, Script_1.NativeScriptKind.RequireAnyOf, "f");
        return script;
    }
    static newScriptNOfK(scriptNOfK) {
        const script = new NativeScript();
        __classPrivateFieldSet(script, _NativeScript_scripNOfK, scriptNOfK, "f");
        __classPrivateFieldSet(script, _NativeScript_kind, Script_1.NativeScriptKind.RequireNOf, "f");
        return script;
    }
    static newTimelockStart(timelockStart) {
        const script = new NativeScript();
        __classPrivateFieldSet(script, _NativeScript_timelockStart, timelockStart, "f");
        __classPrivateFieldSet(script, _NativeScript_kind, Script_1.NativeScriptKind.RequireTimeAfter, "f");
        return script;
    }
    static newTimelockExpiry(timelockExpiry) {
        const script = new NativeScript();
        __classPrivateFieldSet(script, _NativeScript_timelockExpiry, timelockExpiry, "f");
        __classPrivateFieldSet(script, _NativeScript_kind, Script_1.NativeScriptKind.RequireTimeBefore, "f");
        return script;
    }
    asScriptPubkey() {
        return __classPrivateFieldGet(this, _NativeScript_scriptPubKey, "f");
    }
    asScriptAll() {
        return __classPrivateFieldGet(this, _NativeScript_scriptAll, "f");
    }
    asScriptAny() {
        return __classPrivateFieldGet(this, _NativeScript_scriptAny, "f");
    }
    asScriptNOfK() {
        return __classPrivateFieldGet(this, _NativeScript_scripNOfK, "f");
    }
    asTimelockStart() {
        return __classPrivateFieldGet(this, _NativeScript_timelockStart, "f");
    }
    asTimelockExpiry() {
        return __classPrivateFieldGet(this, _NativeScript_timelockExpiry, "f");
    }
}
exports.NativeScript = NativeScript;
_NativeScript_scriptAll = new WeakMap(), _NativeScript_scriptAny = new WeakMap(), _NativeScript_scripNOfK = new WeakMap(), _NativeScript_scriptPubKey = new WeakMap(), _NativeScript_timelockExpiry = new WeakMap(), _NativeScript_timelockStart = new WeakMap(), _NativeScript_kind = new WeakMap(), _NativeScript_originalBytes = new WeakMap();
//# sourceMappingURL=NativeScript.js.map