"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var _ProposalProcedure_parameterChangeAction, _ProposalProcedure_hardForkInitiationAction, _ProposalProcedure_treasuryWithdrawalsAction, _ProposalProcedure_noConfidence, _ProposalProcedure_updateCommittee, _ProposalProcedure_newConstitution, _ProposalProcedure_infoAction, _ProposalProcedure_kind, _ProposalProcedure_deposit, _ProposalProcedure_rewardAccount, _ProposalProcedure_anchor, _ProposalProcedure_originalBytes;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProposalProcedure = void 0;
const Address_1 = require("../../../Cardano/Address");
const Anchor_1 = require("../../Common/Anchor");
const CBOR_1 = require("../../CBOR");
const GovernanceActionKind_1 = require("./GovernanceActionKind");
const Governance_1 = require("../../../Cardano/types/Governance");
const HardForkInitiationAction_1 = require("./HardForkInitiationAction");
const util_1 = require("@cardano-sdk/util");
const InfoAction_1 = require("./InfoAction");
const NewConstitution_1 = require("./NewConstitution");
const NoConfidence_1 = require("./NoConfidence");
const ParameterChangeAction_1 = require("./ParameterChangeAction");
const errors_1 = require("../../../errors");
const TreasuryWithdrawalsAction_1 = require("./TreasuryWithdrawalsAction");
const UpdateCommittee_1 = require("./UpdateCommittee");
const misc_1 = require("../../../util/misc");
const PROCEDURE_ARRAY_SIZE = 4;
class ProposalProcedure {
    constructor() {
        _ProposalProcedure_parameterChangeAction.set(this, undefined);
        _ProposalProcedure_hardForkInitiationAction.set(this, undefined);
        _ProposalProcedure_treasuryWithdrawalsAction.set(this, undefined);
        _ProposalProcedure_noConfidence.set(this, undefined);
        _ProposalProcedure_updateCommittee.set(this, undefined);
        _ProposalProcedure_newConstitution.set(this, undefined);
        _ProposalProcedure_infoAction.set(this, undefined);
        _ProposalProcedure_kind.set(this, void 0);
        _ProposalProcedure_deposit.set(this, void 0);
        _ProposalProcedure_rewardAccount.set(this, void 0);
        _ProposalProcedure_anchor.set(this, void 0);
        _ProposalProcedure_originalBytes.set(this, undefined);
    }
    toCbor() {
        const writer = new CBOR_1.CborWriter();
        if (__classPrivateFieldGet(this, _ProposalProcedure_originalBytes, "f"))
            return __classPrivateFieldGet(this, _ProposalProcedure_originalBytes, "f");
        let actionCbor;
        switch (__classPrivateFieldGet(this, _ProposalProcedure_kind, "f")) {
            case GovernanceActionKind_1.GovernanceActionKind.ParameterChange:
                actionCbor = __classPrivateFieldGet(this, _ProposalProcedure_parameterChangeAction, "f").toCbor();
                break;
            case GovernanceActionKind_1.GovernanceActionKind.HardForkInitiation:
                actionCbor = __classPrivateFieldGet(this, _ProposalProcedure_hardForkInitiationAction, "f").toCbor();
                break;
            case GovernanceActionKind_1.GovernanceActionKind.TreasuryWithdrawals:
                actionCbor = __classPrivateFieldGet(this, _ProposalProcedure_treasuryWithdrawalsAction, "f").toCbor();
                break;
            case GovernanceActionKind_1.GovernanceActionKind.NoConfidence:
                actionCbor = __classPrivateFieldGet(this, _ProposalProcedure_noConfidence, "f").toCbor();
                break;
            case GovernanceActionKind_1.GovernanceActionKind.UpdateCommittee:
                actionCbor = __classPrivateFieldGet(this, _ProposalProcedure_updateCommittee, "f").toCbor();
                break;
            case GovernanceActionKind_1.GovernanceActionKind.NewConstitution:
                actionCbor = __classPrivateFieldGet(this, _ProposalProcedure_newConstitution, "f").toCbor();
                break;
            case GovernanceActionKind_1.GovernanceActionKind.Info:
                actionCbor = __classPrivateFieldGet(this, _ProposalProcedure_infoAction, "f").toCbor();
                break;
            default:
                throw new util_1.InvalidStateError(`Unexpected kind value: ${__classPrivateFieldGet(this, _ProposalProcedure_kind, "f")}`);
        }
        writer.writeStartArray(PROCEDURE_ARRAY_SIZE);
        writer.writeInt(__classPrivateFieldGet(this, _ProposalProcedure_deposit, "f"));
        const rewardAddress = Address_1.RewardAddress.fromAddress(Address_1.Address.fromBech32(__classPrivateFieldGet(this, _ProposalProcedure_rewardAccount, "f")));
        if (!rewardAddress) {
            throw new errors_1.SerializationError(errors_1.SerializationFailure.InvalidAddress, `Invalid withdrawal address: ${__classPrivateFieldGet(this, _ProposalProcedure_rewardAccount, "f")}`);
        }
        writer.writeByteString(Buffer.from(rewardAddress.toAddress().toBytes(), 'hex'));
        writer.writeEncodedValue((0, misc_1.hexToBytes)(actionCbor));
        writer.writeEncodedValue((0, misc_1.hexToBytes)(__classPrivateFieldGet(this, _ProposalProcedure_anchor, "f").toCbor()));
        return writer.encodeAsHex();
    }
    static fromCbor(cbor) {
        let proposalProcedure;
        const reader = new CBOR_1.CborReader(cbor);
        reader.readStartArray();
        const deposit = reader.readInt();
        const rewardAccount = Address_1.Address.fromBytes(util_1.HexBlob.fromBytes(reader.readByteString())).toBech32();
        const actionCbor = util_1.HexBlob.fromBytes(reader.readEncodedValue());
        const anchor = Anchor_1.Anchor.fromCbor(util_1.HexBlob.fromBytes(reader.readEncodedValue()));
        reader.readEndArray();
        const actionReader = new CBOR_1.CborReader(actionCbor);
        actionReader.readStartArray();
        let action;
        const kind = Number(actionReader.readInt());
        switch (kind) {
            case GovernanceActionKind_1.GovernanceActionKind.ParameterChange:
                action = ParameterChangeAction_1.ParameterChangeAction.fromCbor(actionCbor);
                proposalProcedure = ProposalProcedure.newParameterChangeAction(deposit, rewardAccount, anchor, action);
                break;
            case GovernanceActionKind_1.GovernanceActionKind.HardForkInitiation:
                action = HardForkInitiationAction_1.HardForkInitiationAction.fromCbor(actionCbor);
                proposalProcedure = ProposalProcedure.newHardForkInitiationAction(deposit, rewardAccount, anchor, action);
                break;
            case GovernanceActionKind_1.GovernanceActionKind.TreasuryWithdrawals:
                action = TreasuryWithdrawalsAction_1.TreasuryWithdrawalsAction.fromCbor(actionCbor);
                proposalProcedure = ProposalProcedure.newTreasuryWithdrawalsAction(deposit, rewardAccount, anchor, action);
                break;
            case GovernanceActionKind_1.GovernanceActionKind.NoConfidence:
                action = NoConfidence_1.NoConfidence.fromCbor(actionCbor);
                proposalProcedure = ProposalProcedure.newNoConfidence(deposit, rewardAccount, anchor, action);
                break;
            case GovernanceActionKind_1.GovernanceActionKind.UpdateCommittee:
                action = UpdateCommittee_1.UpdateCommittee.fromCbor(actionCbor);
                proposalProcedure = ProposalProcedure.newUpdateCommittee(deposit, rewardAccount, anchor, action);
                break;
            case GovernanceActionKind_1.GovernanceActionKind.NewConstitution:
                action = NewConstitution_1.NewConstitution.fromCbor(actionCbor);
                proposalProcedure = ProposalProcedure.newNewConstitution(deposit, rewardAccount, anchor, action);
                break;
            case GovernanceActionKind_1.GovernanceActionKind.Info:
                action = InfoAction_1.InfoAction.fromCbor(actionCbor);
                proposalProcedure = ProposalProcedure.newInfoAction(deposit, rewardAccount, anchor, action);
                break;
            default:
                throw new util_1.InvalidStateError(`Unexpected kind value: ${kind}`);
        }
        __classPrivateFieldSet(proposalProcedure, _ProposalProcedure_originalBytes, cbor, "f");
        return proposalProcedure;
    }
    toCore() {
        let actionCore;
        switch (__classPrivateFieldGet(this, _ProposalProcedure_kind, "f")) {
            case GovernanceActionKind_1.GovernanceActionKind.ParameterChange:
                actionCore = __classPrivateFieldGet(this, _ProposalProcedure_parameterChangeAction, "f").toCore();
                break;
            case GovernanceActionKind_1.GovernanceActionKind.HardForkInitiation:
                actionCore = __classPrivateFieldGet(this, _ProposalProcedure_hardForkInitiationAction, "f").toCore();
                break;
            case GovernanceActionKind_1.GovernanceActionKind.TreasuryWithdrawals:
                actionCore = __classPrivateFieldGet(this, _ProposalProcedure_treasuryWithdrawalsAction, "f").toCore();
                break;
            case GovernanceActionKind_1.GovernanceActionKind.NoConfidence:
                actionCore = __classPrivateFieldGet(this, _ProposalProcedure_noConfidence, "f").toCore();
                break;
            case GovernanceActionKind_1.GovernanceActionKind.UpdateCommittee:
                actionCore = __classPrivateFieldGet(this, _ProposalProcedure_updateCommittee, "f").toCore();
                break;
            case GovernanceActionKind_1.GovernanceActionKind.NewConstitution:
                actionCore = __classPrivateFieldGet(this, _ProposalProcedure_newConstitution, "f").toCore();
                break;
            case GovernanceActionKind_1.GovernanceActionKind.Info:
                actionCore = __classPrivateFieldGet(this, _ProposalProcedure_infoAction, "f").toCore();
                break;
            default:
                throw new util_1.InvalidStateError(`Unexpected kind value: ${__classPrivateFieldGet(this, _ProposalProcedure_kind, "f")}`);
        }
        return {
            anchor: __classPrivateFieldGet(this, _ProposalProcedure_anchor, "f").toCore(),
            deposit: __classPrivateFieldGet(this, _ProposalProcedure_deposit, "f"),
            governanceAction: actionCore,
            rewardAccount: __classPrivateFieldGet(this, _ProposalProcedure_rewardAccount, "f")
        };
    }
    static fromCore(proposalProcedure) {
        let action;
        let procedure;
        const anchor = Anchor_1.Anchor.fromCore(proposalProcedure.anchor);
        switch (proposalProcedure.governanceAction.__typename) {
            case Governance_1.GovernanceActionType.parameter_change_action:
                action = ParameterChangeAction_1.ParameterChangeAction.fromCore(proposalProcedure.governanceAction);
                procedure = ProposalProcedure.newParameterChangeAction(proposalProcedure.deposit, proposalProcedure.rewardAccount, anchor, action);
                break;
            case Governance_1.GovernanceActionType.hard_fork_initiation_action:
                action = HardForkInitiationAction_1.HardForkInitiationAction.fromCore(proposalProcedure.governanceAction);
                procedure = ProposalProcedure.newHardForkInitiationAction(proposalProcedure.deposit, proposalProcedure.rewardAccount, anchor, action);
                break;
            case Governance_1.GovernanceActionType.treasury_withdrawals_action:
                action = TreasuryWithdrawalsAction_1.TreasuryWithdrawalsAction.fromCore(proposalProcedure.governanceAction);
                procedure = ProposalProcedure.newTreasuryWithdrawalsAction(proposalProcedure.deposit, proposalProcedure.rewardAccount, anchor, action);
                break;
            case Governance_1.GovernanceActionType.no_confidence:
                action = NoConfidence_1.NoConfidence.fromCore(proposalProcedure.governanceAction);
                procedure = ProposalProcedure.newNoConfidence(proposalProcedure.deposit, proposalProcedure.rewardAccount, anchor, action);
                break;
            case Governance_1.GovernanceActionType.update_committee:
                action = UpdateCommittee_1.UpdateCommittee.fromCore(proposalProcedure.governanceAction);
                procedure = ProposalProcedure.newUpdateCommittee(proposalProcedure.deposit, proposalProcedure.rewardAccount, anchor, action);
                break;
            case Governance_1.GovernanceActionType.new_constitution:
                action = NewConstitution_1.NewConstitution.fromCore(proposalProcedure.governanceAction);
                procedure = ProposalProcedure.newNewConstitution(proposalProcedure.deposit, proposalProcedure.rewardAccount, anchor, action);
                break;
            case Governance_1.GovernanceActionType.info_action:
                action = InfoAction_1.InfoAction.fromCore(proposalProcedure.governanceAction);
                procedure = ProposalProcedure.newInfoAction(proposalProcedure.deposit, proposalProcedure.rewardAccount, anchor, action);
                break;
            default:
                throw new util_1.InvalidStateError('Unexpected ProposalProcedure type');
        }
        return procedure;
    }
    static newParameterChangeAction(deposit, rewardAccount, anchor, parameterChangeAction) {
        const proposal = new ProposalProcedure();
        __classPrivateFieldSet(proposal, _ProposalProcedure_kind, GovernanceActionKind_1.GovernanceActionKind.ParameterChange, "f");
        __classPrivateFieldSet(proposal, _ProposalProcedure_deposit, deposit, "f");
        __classPrivateFieldSet(proposal, _ProposalProcedure_rewardAccount, rewardAccount, "f");
        __classPrivateFieldSet(proposal, _ProposalProcedure_anchor, anchor, "f");
        __classPrivateFieldSet(proposal, _ProposalProcedure_parameterChangeAction, parameterChangeAction, "f");
        return proposal;
    }
    static newHardForkInitiationAction(deposit, rewardAccount, anchor, hardForkInitiationAction) {
        const proposal = new ProposalProcedure();
        __classPrivateFieldSet(proposal, _ProposalProcedure_kind, GovernanceActionKind_1.GovernanceActionKind.HardForkInitiation, "f");
        __classPrivateFieldSet(proposal, _ProposalProcedure_deposit, deposit, "f");
        __classPrivateFieldSet(proposal, _ProposalProcedure_rewardAccount, rewardAccount, "f");
        __classPrivateFieldSet(proposal, _ProposalProcedure_anchor, anchor, "f");
        __classPrivateFieldSet(proposal, _ProposalProcedure_hardForkInitiationAction, hardForkInitiationAction, "f");
        return proposal;
    }
    static newTreasuryWithdrawalsAction(deposit, rewardAccount, anchor, treasuryWithdrawalsAction) {
        const proposal = new ProposalProcedure();
        __classPrivateFieldSet(proposal, _ProposalProcedure_kind, GovernanceActionKind_1.GovernanceActionKind.TreasuryWithdrawals, "f");
        __classPrivateFieldSet(proposal, _ProposalProcedure_deposit, deposit, "f");
        __classPrivateFieldSet(proposal, _ProposalProcedure_rewardAccount, rewardAccount, "f");
        __classPrivateFieldSet(proposal, _ProposalProcedure_anchor, anchor, "f");
        __classPrivateFieldSet(proposal, _ProposalProcedure_treasuryWithdrawalsAction, treasuryWithdrawalsAction, "f");
        return proposal;
    }
    static newNoConfidence(deposit, rewardAccount, anchor, noConfidence) {
        const proposal = new ProposalProcedure();
        __classPrivateFieldSet(proposal, _ProposalProcedure_kind, GovernanceActionKind_1.GovernanceActionKind.NoConfidence, "f");
        __classPrivateFieldSet(proposal, _ProposalProcedure_deposit, deposit, "f");
        __classPrivateFieldSet(proposal, _ProposalProcedure_rewardAccount, rewardAccount, "f");
        __classPrivateFieldSet(proposal, _ProposalProcedure_anchor, anchor, "f");
        __classPrivateFieldSet(proposal, _ProposalProcedure_noConfidence, noConfidence, "f");
        return proposal;
    }
    static newUpdateCommittee(deposit, rewardAccount, anchor, updateCommittee) {
        const proposal = new ProposalProcedure();
        __classPrivateFieldSet(proposal, _ProposalProcedure_kind, GovernanceActionKind_1.GovernanceActionKind.UpdateCommittee, "f");
        __classPrivateFieldSet(proposal, _ProposalProcedure_deposit, deposit, "f");
        __classPrivateFieldSet(proposal, _ProposalProcedure_rewardAccount, rewardAccount, "f");
        __classPrivateFieldSet(proposal, _ProposalProcedure_anchor, anchor, "f");
        __classPrivateFieldSet(proposal, _ProposalProcedure_updateCommittee, updateCommittee, "f");
        return proposal;
    }
    static newNewConstitution(deposit, rewardAccount, anchor, newConstitution) {
        const proposal = new ProposalProcedure();
        __classPrivateFieldSet(proposal, _ProposalProcedure_kind, GovernanceActionKind_1.GovernanceActionKind.NewConstitution, "f");
        __classPrivateFieldSet(proposal, _ProposalProcedure_deposit, deposit, "f");
        __classPrivateFieldSet(proposal, _ProposalProcedure_rewardAccount, rewardAccount, "f");
        __classPrivateFieldSet(proposal, _ProposalProcedure_anchor, anchor, "f");
        __classPrivateFieldSet(proposal, _ProposalProcedure_newConstitution, newConstitution, "f");
        return proposal;
    }
    static newInfoAction(deposit, rewardAccount, anchor, infoAction) {
        const proposal = new ProposalProcedure();
        __classPrivateFieldSet(proposal, _ProposalProcedure_kind, GovernanceActionKind_1.GovernanceActionKind.Info, "f");
        __classPrivateFieldSet(proposal, _ProposalProcedure_deposit, deposit, "f");
        __classPrivateFieldSet(proposal, _ProposalProcedure_rewardAccount, rewardAccount, "f");
        __classPrivateFieldSet(proposal, _ProposalProcedure_anchor, anchor, "f");
        __classPrivateFieldSet(proposal, _ProposalProcedure_infoAction, infoAction, "f");
        return proposal;
    }
    kind() {
        return __classPrivateFieldGet(this, _ProposalProcedure_kind, "f");
    }
    deposit() {
        return __classPrivateFieldGet(this, _ProposalProcedure_deposit, "f");
    }
    rewardAccount() {
        return __classPrivateFieldGet(this, _ProposalProcedure_rewardAccount, "f");
    }
    anchor() {
        return __classPrivateFieldGet(this, _ProposalProcedure_anchor, "f");
    }
    getParameterChangeAction() {
        return __classPrivateFieldGet(this, _ProposalProcedure_parameterChangeAction, "f");
    }
    getHardForkInitiationAction() {
        return __classPrivateFieldGet(this, _ProposalProcedure_hardForkInitiationAction, "f");
    }
    getTreasuryWithdrawalsAction() {
        return __classPrivateFieldGet(this, _ProposalProcedure_treasuryWithdrawalsAction, "f");
    }
    getNoConfidence() {
        return __classPrivateFieldGet(this, _ProposalProcedure_noConfidence, "f");
    }
    getUpdateCommittee() {
        return __classPrivateFieldGet(this, _ProposalProcedure_updateCommittee, "f");
    }
    getNewConstitution() {
        return __classPrivateFieldGet(this, _ProposalProcedure_newConstitution, "f");
    }
    getInfoAction() {
        return __classPrivateFieldGet(this, _ProposalProcedure_infoAction, "f");
    }
}
exports.ProposalProcedure = ProposalProcedure;
_ProposalProcedure_parameterChangeAction = new WeakMap(), _ProposalProcedure_hardForkInitiationAction = new WeakMap(), _ProposalProcedure_treasuryWithdrawalsAction = new WeakMap(), _ProposalProcedure_noConfidence = new WeakMap(), _ProposalProcedure_updateCommittee = new WeakMap(), _ProposalProcedure_newConstitution = new WeakMap(), _ProposalProcedure_infoAction = new WeakMap(), _ProposalProcedure_kind = new WeakMap(), _ProposalProcedure_deposit = new WeakMap(), _ProposalProcedure_rewardAccount = new WeakMap(), _ProposalProcedure_anchor = new WeakMap(), _ProposalProcedure_originalBytes = new WeakMap();
//# sourceMappingURL=ProposalProcedure.js.map