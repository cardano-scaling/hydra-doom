"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _UpdateCommittee_govActionId, _UpdateCommittee_membersToBeRemoved, _UpdateCommittee_membersToBeAdded, _UpdateCommittee_newQuorum, _UpdateCommittee_originalBytes;
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpdateCommittee = void 0;
const CBOR_1 = require("../../CBOR");
const Common_1 = require("../../Common");
const Governance_1 = require("../../../Cardano/types/Governance");
const Block_1 = require("../../../Cardano/types/Block");
const GovernanceActionId_1 = require("../../Common/GovernanceActionId");
const GovernanceActionKind_1 = require("./GovernanceActionKind");
const util_1 = require("@cardano-sdk/util");
const misc_1 = require("../../../util/misc");
const EMBEDDED_GROUP_SIZE = 5;
const CREDENTIAL_ARRAY_SIZE = 2;
const CREDENTIAL_INDEX = 0;
const EPOCH_INDEX = 1;
class UpdateCommittee {
    constructor(membersToBeRemoved, membersToBeAdded, newQuorum, govActionId) {
        _UpdateCommittee_govActionId.set(this, void 0);
        _UpdateCommittee_membersToBeRemoved.set(this, void 0);
        _UpdateCommittee_membersToBeAdded.set(this, void 0);
        _UpdateCommittee_newQuorum.set(this, void 0);
        _UpdateCommittee_originalBytes.set(this, undefined);
        __classPrivateFieldSet(this, _UpdateCommittee_membersToBeRemoved, membersToBeRemoved, "f");
        __classPrivateFieldSet(this, _UpdateCommittee_membersToBeAdded, membersToBeAdded, "f");
        __classPrivateFieldSet(this, _UpdateCommittee_newQuorum, newQuorum, "f");
        __classPrivateFieldSet(this, _UpdateCommittee_govActionId, govActionId, "f");
    }
    toCbor() {
        const writer = new CBOR_1.CborWriter();
        if (__classPrivateFieldGet(this, _UpdateCommittee_originalBytes, "f"))
            return __classPrivateFieldGet(this, _UpdateCommittee_originalBytes, "f");
        writer.writeStartArray(EMBEDDED_GROUP_SIZE);
        writer.writeInt(GovernanceActionKind_1.GovernanceActionKind.UpdateCommittee);
        __classPrivateFieldGet(this, _UpdateCommittee_govActionId, "f") ? writer.writeEncodedValue((0, misc_1.hexToBytes)(__classPrivateFieldGet(this, _UpdateCommittee_govActionId, "f").toCbor())) : writer.writeNull();
        writer.writeEncodedValue((0, misc_1.hexToBytes)(__classPrivateFieldGet(this, _UpdateCommittee_membersToBeRemoved, "f").toCbor()));
        writer.writeStartMap(__classPrivateFieldGet(this, _UpdateCommittee_membersToBeAdded, "f").length);
        for (const entry of __classPrivateFieldGet(this, _UpdateCommittee_membersToBeAdded, "f")) {
            writer.writeStartArray(CREDENTIAL_ARRAY_SIZE);
            writer.writeInt(entry[CREDENTIAL_INDEX].type);
            writer.writeByteString((0, misc_1.hexToBytes)(entry[CREDENTIAL_INDEX].hash));
            writer.writeInt(entry[EPOCH_INDEX]);
        }
        writer.writeEncodedValue((0, misc_1.hexToBytes)(__classPrivateFieldGet(this, _UpdateCommittee_newQuorum, "f").toCbor()));
        return writer.encodeAsHex();
    }
    static fromCbor(cbor) {
        const reader = new CBOR_1.CborReader(cbor);
        const length = reader.readStartArray();
        if (length !== EMBEDDED_GROUP_SIZE)
            throw new util_1.InvalidArgumentError('cbor', `Expected an array of ${EMBEDDED_GROUP_SIZE} elements, but got an array of ${length} elements`);
        const kind = Number(reader.readUInt());
        if (kind !== GovernanceActionKind_1.GovernanceActionKind.UpdateCommittee)
            throw new util_1.InvalidArgumentError('cbor', `Expected action kind, expected ${GovernanceActionKind_1.GovernanceActionKind.UpdateCommittee} but got ${kind}`);
        let govActionId;
        if (reader.peekState() === CBOR_1.CborReaderState.Null) {
            reader.readNull();
        }
        else {
            govActionId = GovernanceActionId_1.GovernanceActionId.fromCbor(util_1.HexBlob.fromBytes(reader.readEncodedValue()));
        }
        const membersToRemove = Common_1.CborSet.fromCbor(util_1.HexBlob.fromBytes(reader.readEncodedValue()), Common_1.Credential.fromCbor);
        reader.readStartMap();
        const membersToAdd = [];
        while (reader.peekState() !== CBOR_1.CborReaderState.EndMap) {
            if (reader.readStartArray() !== CREDENTIAL_ARRAY_SIZE)
                throw new util_1.InvalidArgumentError('cbor', `Expected an array of ${CREDENTIAL_ARRAY_SIZE} elements, but got an array of ${length} elements`);
            const type = Number(reader.readUInt());
            const hash = util_1.HexBlob.fromBytes(reader.readByteString());
            reader.readEndArray();
            const epoch = Number(reader.readUInt());
            membersToAdd.push([{ hash, type }, epoch]);
        }
        reader.readEndMap();
        const quorumThreshold = Common_1.UnitInterval.fromCbor(util_1.HexBlob.fromBytes(reader.readEncodedValue()));
        const action = new UpdateCommittee(membersToRemove, membersToAdd, quorumThreshold, govActionId);
        __classPrivateFieldSet(action, _UpdateCommittee_originalBytes, cbor, "f");
        return action;
    }
    toCore() {
        return {
            __typename: Governance_1.GovernanceActionType.update_committee,
            governanceActionId: __classPrivateFieldGet(this, _UpdateCommittee_govActionId, "f") ? __classPrivateFieldGet(this, _UpdateCommittee_govActionId, "f").toCore() : null,
            membersToBeAdded: new Set(__classPrivateFieldGet(this, _UpdateCommittee_membersToBeAdded, "f").map((entry) => ({
                coldCredential: entry[CREDENTIAL_INDEX],
                epoch: (0, Block_1.EpochNo)(entry[EPOCH_INDEX])
            }))),
            membersToBeRemoved: new Set(__classPrivateFieldGet(this, _UpdateCommittee_membersToBeRemoved, "f").toCore()),
            newQuorumThreshold: __classPrivateFieldGet(this, _UpdateCommittee_newQuorum, "f").toCore()
        };
    }
    static fromCore(updateCommittee) {
        return new UpdateCommittee(Common_1.CborSet.fromCore([...updateCommittee.membersToBeRemoved], Common_1.Credential.fromCore), [...updateCommittee.membersToBeAdded].map((entry) => [entry.coldCredential, entry.epoch]), Common_1.UnitInterval.fromCore(updateCommittee.newQuorumThreshold), updateCommittee.governanceActionId !== null
            ? GovernanceActionId_1.GovernanceActionId.fromCore(updateCommittee.governanceActionId)
            : undefined);
    }
    govActionId() {
        return __classPrivateFieldGet(this, _UpdateCommittee_govActionId, "f");
    }
    membersToBeRemoved() {
        return __classPrivateFieldGet(this, _UpdateCommittee_membersToBeRemoved, "f").toCore();
    }
    membersToBeAdded() {
        return __classPrivateFieldGet(this, _UpdateCommittee_membersToBeAdded, "f");
    }
    newQuorum() {
        return __classPrivateFieldGet(this, _UpdateCommittee_newQuorum, "f");
    }
}
exports.UpdateCommittee = UpdateCommittee;
_UpdateCommittee_govActionId = new WeakMap(), _UpdateCommittee_membersToBeRemoved = new WeakMap(), _UpdateCommittee_membersToBeAdded = new WeakMap(), _UpdateCommittee_newQuorum = new WeakMap(), _UpdateCommittee_originalBytes = new WeakMap();
//# sourceMappingURL=UpdateCommittee.js.map