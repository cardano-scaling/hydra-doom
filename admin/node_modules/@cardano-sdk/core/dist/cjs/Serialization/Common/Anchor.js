"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Anchor_url, _Anchor_dataHash, _Anchor_originalBytes;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Anchor = void 0;
const Crypto = __importStar(require("@cardano-sdk/crypto"));
const CBOR_1 = require("../CBOR");
const util_1 = require("@cardano-sdk/util");
const EMBEDDED_GROUP_SIZE = 2;
const MAX_URL_SIZE_STR_LENGTH = 128;
class Anchor {
    constructor(url, dataHash) {
        _Anchor_url.set(this, void 0);
        _Anchor_dataHash.set(this, void 0);
        _Anchor_originalBytes.set(this, undefined);
        if (url.length > MAX_URL_SIZE_STR_LENGTH)
            throw new util_1.InvalidArgumentError('url', `url must be less or equal to 64 characters long, actual size ${url.length}`);
        __classPrivateFieldSet(this, _Anchor_url, url, "f");
        __classPrivateFieldSet(this, _Anchor_dataHash, dataHash, "f");
    }
    toCbor() {
        const writer = new CBOR_1.CborWriter();
        if (__classPrivateFieldGet(this, _Anchor_originalBytes, "f"))
            return __classPrivateFieldGet(this, _Anchor_originalBytes, "f");
        writer.writeStartArray(EMBEDDED_GROUP_SIZE);
        writer.writeTextString(__classPrivateFieldGet(this, _Anchor_url, "f"));
        writer.writeByteString(Buffer.from(__classPrivateFieldGet(this, _Anchor_dataHash, "f"), 'hex'));
        return writer.encodeAsHex();
    }
    static fromCbor(cbor) {
        const reader = new CBOR_1.CborReader(cbor);
        const length = reader.readStartArray();
        if (length !== EMBEDDED_GROUP_SIZE)
            throw new util_1.InvalidArgumentError('cbor', `Expected an array of ${EMBEDDED_GROUP_SIZE} elements, but got an array of ${length} elements`);
        const url = reader.readTextString();
        const hash = Crypto.Hash32ByteBase16(util_1.HexBlob.fromBytes(reader.readByteString()));
        reader.readEndArray();
        const anchor = new Anchor(url, hash);
        __classPrivateFieldSet(anchor, _Anchor_originalBytes, cbor, "f");
        return anchor;
    }
    toCore() {
        return {
            dataHash: __classPrivateFieldGet(this, _Anchor_dataHash, "f"),
            url: __classPrivateFieldGet(this, _Anchor_url, "f")
        };
    }
    static fromCore(anchor) {
        return new Anchor(anchor.url, anchor.dataHash);
    }
    url() {
        return __classPrivateFieldGet(this, _Anchor_url, "f");
    }
    setUrl(url) {
        __classPrivateFieldSet(this, _Anchor_url, url, "f");
        __classPrivateFieldSet(this, _Anchor_originalBytes, undefined, "f");
    }
    dataHash() {
        return __classPrivateFieldGet(this, _Anchor_dataHash, "f");
    }
    setDataHash(dataHash) {
        __classPrivateFieldSet(this, _Anchor_dataHash, dataHash, "f");
        __classPrivateFieldSet(this, _Anchor_originalBytes, undefined, "f");
    }
}
exports.Anchor = Anchor;
_Anchor_url = new WeakMap(), _Anchor_dataHash = new WeakMap(), _Anchor_originalBytes = new WeakMap();
//# sourceMappingURL=Anchor.js.map