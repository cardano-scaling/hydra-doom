"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Redeemers_values, _Redeemers_originalBytes;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Redeemers = void 0;
const CBOR_1 = require("../../CBOR");
const Common_1 = require("../../Common");
const util_1 = require("@cardano-sdk/util");
const PlutusData_1 = require("../../PlutusData");
const Redeemer_1 = require("./Redeemer");
const misc_1 = require("../../../util/misc");
const conwayEra_1 = require("../../../util/conwayEra");
const MAP_INDEX_EMBEDDED_GROUP_SIZE = 2;
const MAP_VALUE_EMBEDDED_GROUP_SIZE = 2;
class Redeemers {
    constructor(redeemers) {
        _Redeemers_values.set(this, void 0);
        _Redeemers_originalBytes.set(this, undefined);
        __classPrivateFieldSet(this, _Redeemers_values, [...redeemers], "f");
    }
    toCbor() {
        if (__classPrivateFieldGet(this, _Redeemers_originalBytes, "f"))
            return __classPrivateFieldGet(this, _Redeemers_originalBytes, "f");
        const writer = new CBOR_1.CborWriter();
        if (conwayEra_1.inConwayEra) {
            const redeemersMap = new Map(__classPrivateFieldGet(this, _Redeemers_values, "f").map((redeemer) => [`${redeemer.tag()}:${redeemer.index()}`, redeemer]));
            writer.writeStartMap(redeemersMap.size);
            for (const redeemer of redeemersMap.values()) {
                writer.writeStartArray(2);
                writer.writeInt(redeemer.tag());
                writer.writeInt(redeemer.index());
                writer.writeStartArray(2);
                writer.writeEncodedValue((0, misc_1.hexToBytes)(redeemer.data().toCbor()));
                writer.writeEncodedValue((0, misc_1.hexToBytes)(redeemer.exUnits().toCbor()));
            }
        }
        else {
            writer.writeStartArray(__classPrivateFieldGet(this, _Redeemers_values, "f").length);
            for (const data of __classPrivateFieldGet(this, _Redeemers_values, "f")) {
                writer.writeEncodedValue(Buffer.from(data.toCbor(), 'hex'));
            }
        }
        return writer.encodeAsHex();
    }
    static fromCbor(cbor) {
        const redeemers = [];
        const reader = new CBOR_1.CborReader(cbor);
        if (reader.peekState() === CBOR_1.CborReaderState.StartMap) {
            reader.readStartMap();
            while (reader.peekState() !== CBOR_1.CborReaderState.EndMap) {
                const indexLength = reader.readStartArray();
                if (indexLength !== MAP_INDEX_EMBEDDED_GROUP_SIZE)
                    throw new util_1.InvalidArgumentError('cbor', `Redeemers map index should be an array of ${MAP_INDEX_EMBEDDED_GROUP_SIZE} elements, but got an array of ${indexLength} elements`);
                const tag = Number(reader.readUInt());
                const index = reader.readUInt();
                reader.readEndArray();
                const valueLength = reader.readStartArray();
                if (valueLength !== MAP_VALUE_EMBEDDED_GROUP_SIZE)
                    throw new util_1.InvalidArgumentError('cbor', `Redeemers map value should be an array of ${MAP_VALUE_EMBEDDED_GROUP_SIZE} elements, but got an array of ${valueLength} elements`);
                const data = PlutusData_1.PlutusData.fromCbor(util_1.HexBlob.fromBytes(reader.readEncodedValue()));
                const exUnits = Common_1.ExUnits.fromCbor(util_1.HexBlob.fromBytes(reader.readEncodedValue()));
                reader.readEndArray();
                redeemers.push(new Redeemer_1.Redeemer(tag, index, data, exUnits));
            }
            reader.readEndMap();
        }
        else {
            reader.readStartArray();
            while (reader.peekState() !== CBOR_1.CborReaderState.EndArray) {
                redeemers.push(Redeemer_1.Redeemer.fromCbor(util_1.HexBlob.fromBytes(reader.readEncodedValue())));
            }
            reader.readEndArray();
        }
        const result = new Redeemers(redeemers);
        __classPrivateFieldSet(result, _Redeemers_originalBytes, cbor, "f");
        return result;
    }
    toCore() {
        return __classPrivateFieldGet(this, _Redeemers_values, "f").map((redeemer) => redeemer.toCore());
    }
    static fromCore(redeemers) {
        return new Redeemers(redeemers.map((redeemer) => Redeemer_1.Redeemer.fromCore(redeemer)));
    }
    values() {
        return __classPrivateFieldGet(this, _Redeemers_values, "f");
    }
    setValues(redeemers) {
        __classPrivateFieldSet(this, _Redeemers_values, [...redeemers], "f");
        __classPrivateFieldSet(this, _Redeemers_originalBytes, undefined, "f");
    }
    size() {
        return __classPrivateFieldGet(this, _Redeemers_values, "f").length;
    }
}
exports.Redeemers = Redeemers;
_Redeemers_values = new WeakMap(), _Redeemers_originalBytes = new WeakMap();
//# sourceMappingURL=Redeemers.js.map