"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var _Certificate_kind, _Certificate_genesisKeyDelegation, _Certificate_moveInstantaneousReward, _Certificate_poolRegistration, _Certificate_poolRetirement, _Certificate_stakeDelegation, _Certificate_stakeDeregistration, _Certificate_stakeRegistration, _Certificate_registration, _Certificate_unregistration, _Certificate_voteDelegation, _Certificate_stakeVoteDelegation, _Certificate_stakeRegistrationDelegation, _Certificate_voteRegistrationDelegation, _Certificate_stakeVoteRegistrationDelegation, _Certificate_authCommitteeHot, _Certificate_resignCommitteeCold, _Certificate_drepRegistration, _Certificate_drepUnregistration, _Certificate_updateDrep, _Certificate_originalBytes;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Certificate = void 0;
const AuthCommitteeHot_1 = require("./AuthCommitteeHot");
const CBOR_1 = require("../CBOR");
const CertificateKind_1 = require("./CertificateKind");
const Certificate_1 = require("../../Cardano/types/Certificate");
const GenesisKeyDelegation_1 = require("./GenesisKeyDelegation");
const util_1 = require("@cardano-sdk/util");
const MoveInstantaneousReward_1 = require("./MoveInstantaneousReward");
const PoolRegistration_1 = require("./PoolRegistration");
const PoolRetirement_1 = require("./PoolRetirement");
const RegisterDelegateRepresentative_1 = require("./RegisterDelegateRepresentative");
const Registration_1 = require("./Registration");
const ResignCommitteeCold_1 = require("./ResignCommitteeCold");
const StakeDelegation_1 = require("./StakeDelegation");
const StakeDeregistration_1 = require("./StakeDeregistration");
const StakeRegistration_1 = require("./StakeRegistration");
const StakeRegistrationDelegation_1 = require("./StakeRegistrationDelegation");
const StakeVoteDelegation_1 = require("./StakeVoteDelegation");
const StakeVoteRegistrationDelegation_1 = require("./StakeVoteRegistrationDelegation");
const UnregisterDelegateRepresentative_1 = require("./UnregisterDelegateRepresentative");
const Unregistration_1 = require("./Unregistration");
const UpdateDelegateRepresentative_1 = require("./UpdateDelegateRepresentative");
const VoteDelegation_1 = require("./VoteDelegation");
const VoteRegistrationDelegation_1 = require("./VoteRegistrationDelegation");
class Certificate {
    constructor() {
        _Certificate_kind.set(this, void 0);
        _Certificate_genesisKeyDelegation.set(this, void 0);
        _Certificate_moveInstantaneousReward.set(this, void 0);
        _Certificate_poolRegistration.set(this, void 0);
        _Certificate_poolRetirement.set(this, void 0);
        _Certificate_stakeDelegation.set(this, void 0);
        _Certificate_stakeDeregistration.set(this, void 0);
        _Certificate_stakeRegistration.set(this, void 0);
        _Certificate_registration.set(this, void 0);
        _Certificate_unregistration.set(this, void 0);
        _Certificate_voteDelegation.set(this, void 0);
        _Certificate_stakeVoteDelegation.set(this, void 0);
        _Certificate_stakeRegistrationDelegation.set(this, void 0);
        _Certificate_voteRegistrationDelegation.set(this, void 0);
        _Certificate_stakeVoteRegistrationDelegation.set(this, void 0);
        _Certificate_authCommitteeHot.set(this, void 0);
        _Certificate_resignCommitteeCold.set(this, void 0);
        _Certificate_drepRegistration.set(this, void 0);
        _Certificate_drepUnregistration.set(this, void 0);
        _Certificate_updateDrep.set(this, void 0);
        _Certificate_originalBytes.set(this, undefined);
    }
    toCbor() {
        if (__classPrivateFieldGet(this, _Certificate_originalBytes, "f"))
            return __classPrivateFieldGet(this, _Certificate_originalBytes, "f");
        let cbor;
        switch (__classPrivateFieldGet(this, _Certificate_kind, "f")) {
            case CertificateKind_1.CertificateKind.StakeRegistration:
                cbor = __classPrivateFieldGet(this, _Certificate_stakeRegistration, "f").toCbor();
                break;
            case CertificateKind_1.CertificateKind.StakeDeregistration:
                cbor = __classPrivateFieldGet(this, _Certificate_stakeDeregistration, "f").toCbor();
                break;
            case CertificateKind_1.CertificateKind.StakeDelegation:
                cbor = __classPrivateFieldGet(this, _Certificate_stakeDelegation, "f").toCbor();
                break;
            case CertificateKind_1.CertificateKind.PoolRetirement:
                cbor = __classPrivateFieldGet(this, _Certificate_poolRetirement, "f").toCbor();
                break;
            case CertificateKind_1.CertificateKind.PoolRegistration:
                cbor = __classPrivateFieldGet(this, _Certificate_poolRegistration, "f").toCbor();
                break;
            case CertificateKind_1.CertificateKind.MoveInstantaneousRewards:
                cbor = __classPrivateFieldGet(this, _Certificate_moveInstantaneousReward, "f").toCbor();
                break;
            case CertificateKind_1.CertificateKind.GenesisKeyDelegation:
                cbor = __classPrivateFieldGet(this, _Certificate_genesisKeyDelegation, "f").toCbor();
                break;
            case CertificateKind_1.CertificateKind.Registration:
                cbor = __classPrivateFieldGet(this, _Certificate_registration, "f").toCbor();
                break;
            case CertificateKind_1.CertificateKind.Unregistration:
                cbor = __classPrivateFieldGet(this, _Certificate_unregistration, "f").toCbor();
                break;
            case CertificateKind_1.CertificateKind.VoteDelegation:
                cbor = __classPrivateFieldGet(this, _Certificate_voteDelegation, "f").toCbor();
                break;
            case CertificateKind_1.CertificateKind.StakeVoteDelegation:
                cbor = __classPrivateFieldGet(this, _Certificate_stakeVoteDelegation, "f").toCbor();
                break;
            case CertificateKind_1.CertificateKind.StakeRegistrationDelegation:
                cbor = __classPrivateFieldGet(this, _Certificate_stakeRegistrationDelegation, "f").toCbor();
                break;
            case CertificateKind_1.CertificateKind.VoteRegistrationDelegation:
                cbor = __classPrivateFieldGet(this, _Certificate_voteRegistrationDelegation, "f").toCbor();
                break;
            case CertificateKind_1.CertificateKind.StakeVoteRegistrationDelegation:
                cbor = __classPrivateFieldGet(this, _Certificate_stakeVoteRegistrationDelegation, "f").toCbor();
                break;
            case CertificateKind_1.CertificateKind.AuthCommitteeHot:
                cbor = __classPrivateFieldGet(this, _Certificate_authCommitteeHot, "f").toCbor();
                break;
            case CertificateKind_1.CertificateKind.ResignCommitteeCold:
                cbor = __classPrivateFieldGet(this, _Certificate_resignCommitteeCold, "f").toCbor();
                break;
            case CertificateKind_1.CertificateKind.DrepRegistration:
                cbor = __classPrivateFieldGet(this, _Certificate_drepRegistration, "f").toCbor();
                break;
            case CertificateKind_1.CertificateKind.DrepUnregistration:
                cbor = __classPrivateFieldGet(this, _Certificate_drepUnregistration, "f").toCbor();
                break;
            case CertificateKind_1.CertificateKind.UpdateDrep:
                cbor = __classPrivateFieldGet(this, _Certificate_updateDrep, "f").toCbor();
                break;
            default:
                throw new util_1.InvalidStateError(`Unexpected kind value: ${__classPrivateFieldGet(this, _Certificate_kind, "f")}`);
        }
        return cbor;
    }
    static fromCbor(cbor) {
        let certificate;
        const reader = new CBOR_1.CborReader(cbor);
        reader.readStartArray();
        const kind = Number(reader.readInt());
        switch (kind) {
            case CertificateKind_1.CertificateKind.StakeRegistration:
                certificate = Certificate.newStakeRegistration(StakeRegistration_1.StakeRegistration.fromCbor(cbor));
                break;
            case CertificateKind_1.CertificateKind.StakeDeregistration:
                certificate = Certificate.newStakeDeregistration(StakeDeregistration_1.StakeDeregistration.fromCbor(cbor));
                break;
            case CertificateKind_1.CertificateKind.StakeDelegation:
                certificate = Certificate.newStakeDelegation(StakeDelegation_1.StakeDelegation.fromCbor(cbor));
                break;
            case CertificateKind_1.CertificateKind.PoolRetirement:
                certificate = Certificate.newPoolRetirement(PoolRetirement_1.PoolRetirement.fromCbor(cbor));
                break;
            case CertificateKind_1.CertificateKind.PoolRegistration:
                certificate = Certificate.newPoolRegistration(PoolRegistration_1.PoolRegistration.fromCbor(cbor));
                break;
            case CertificateKind_1.CertificateKind.MoveInstantaneousRewards:
                certificate = Certificate.newMoveInstantaneousRewardsCert(MoveInstantaneousReward_1.MoveInstantaneousReward.fromCbor(cbor));
                break;
            case CertificateKind_1.CertificateKind.GenesisKeyDelegation:
                certificate = Certificate.newGenesisKeyDelegation(GenesisKeyDelegation_1.GenesisKeyDelegation.fromCbor(cbor));
                break;
            case CertificateKind_1.CertificateKind.Registration:
                certificate = Certificate.newRegistrationCert(Registration_1.Registration.fromCbor(cbor));
                break;
            case CertificateKind_1.CertificateKind.Unregistration:
                certificate = Certificate.newUnregistrationCert(Unregistration_1.Unregistration.fromCbor(cbor));
                break;
            case CertificateKind_1.CertificateKind.VoteDelegation:
                certificate = Certificate.newVoteDelegationCert(VoteDelegation_1.VoteDelegation.fromCbor(cbor));
                break;
            case CertificateKind_1.CertificateKind.StakeVoteDelegation:
                certificate = Certificate.newStakeVoteDelegationCert(StakeVoteDelegation_1.StakeVoteDelegation.fromCbor(cbor));
                break;
            case CertificateKind_1.CertificateKind.StakeRegistrationDelegation:
                certificate = Certificate.newStakeRegistrationDelegationCert(StakeRegistrationDelegation_1.StakeRegistrationDelegation.fromCbor(cbor));
                break;
            case CertificateKind_1.CertificateKind.VoteRegistrationDelegation:
                certificate = Certificate.newVoteRegistrationDelegationCert(VoteRegistrationDelegation_1.VoteRegistrationDelegation.fromCbor(cbor));
                break;
            case CertificateKind_1.CertificateKind.StakeVoteRegistrationDelegation:
                certificate = Certificate.newStakeVoteRegistrationDelegationCert(StakeVoteRegistrationDelegation_1.StakeVoteRegistrationDelegation.fromCbor(cbor));
                break;
            case CertificateKind_1.CertificateKind.AuthCommitteeHot:
                certificate = Certificate.newAuthCommitteeHotCert(AuthCommitteeHot_1.AuthCommitteeHot.fromCbor(cbor));
                break;
            case CertificateKind_1.CertificateKind.ResignCommitteeCold:
                certificate = Certificate.newResignCommitteeColdCert(ResignCommitteeCold_1.ResignCommitteeCold.fromCbor(cbor));
                break;
            case CertificateKind_1.CertificateKind.DrepRegistration:
                certificate = Certificate.newRegisterDelegateRepresentativeCert(RegisterDelegateRepresentative_1.RegisterDelegateRepresentative.fromCbor(cbor));
                break;
            case CertificateKind_1.CertificateKind.DrepUnregistration:
                certificate = Certificate.newUnregisterDelegateRepresentativeCert(UnregisterDelegateRepresentative_1.UnregisterDelegateRepresentative.fromCbor(cbor));
                break;
            case CertificateKind_1.CertificateKind.UpdateDrep:
                certificate = Certificate.newUpdateDelegateRepresentativeCert(UpdateDelegateRepresentative_1.UpdateDelegateRepresentative.fromCbor(cbor));
                break;
            default:
                throw new util_1.InvalidStateError(`Unexpected kind value: ${kind}`);
        }
        __classPrivateFieldSet(certificate, _Certificate_originalBytes, cbor, "f");
        return certificate;
    }
    toCore() {
        let core;
        switch (__classPrivateFieldGet(this, _Certificate_kind, "f")) {
            case CertificateKind_1.CertificateKind.StakeRegistration:
                core = __classPrivateFieldGet(this, _Certificate_stakeRegistration, "f").toCore();
                break;
            case CertificateKind_1.CertificateKind.StakeDeregistration:
                core = __classPrivateFieldGet(this, _Certificate_stakeDeregistration, "f").toCore();
                break;
            case CertificateKind_1.CertificateKind.StakeDelegation:
                core = __classPrivateFieldGet(this, _Certificate_stakeDelegation, "f").toCore();
                break;
            case CertificateKind_1.CertificateKind.PoolRetirement:
                core = __classPrivateFieldGet(this, _Certificate_poolRetirement, "f").toCore();
                break;
            case CertificateKind_1.CertificateKind.PoolRegistration:
                core = __classPrivateFieldGet(this, _Certificate_poolRegistration, "f").toCore();
                break;
            case CertificateKind_1.CertificateKind.MoveInstantaneousRewards:
                core = __classPrivateFieldGet(this, _Certificate_moveInstantaneousReward, "f").toCore();
                break;
            case CertificateKind_1.CertificateKind.GenesisKeyDelegation:
                core = __classPrivateFieldGet(this, _Certificate_genesisKeyDelegation, "f").toCore();
                break;
            case CertificateKind_1.CertificateKind.Registration:
                core = __classPrivateFieldGet(this, _Certificate_registration, "f").toCore();
                break;
            case CertificateKind_1.CertificateKind.Unregistration:
                core = __classPrivateFieldGet(this, _Certificate_unregistration, "f").toCore();
                break;
            case CertificateKind_1.CertificateKind.VoteDelegation:
                core = __classPrivateFieldGet(this, _Certificate_voteDelegation, "f").toCore();
                break;
            case CertificateKind_1.CertificateKind.StakeVoteDelegation:
                core = __classPrivateFieldGet(this, _Certificate_stakeVoteDelegation, "f").toCore();
                break;
            case CertificateKind_1.CertificateKind.StakeRegistrationDelegation:
                core = __classPrivateFieldGet(this, _Certificate_stakeRegistrationDelegation, "f").toCore();
                break;
            case CertificateKind_1.CertificateKind.VoteRegistrationDelegation:
                core = __classPrivateFieldGet(this, _Certificate_voteRegistrationDelegation, "f").toCore();
                break;
            case CertificateKind_1.CertificateKind.StakeVoteRegistrationDelegation:
                core = __classPrivateFieldGet(this, _Certificate_stakeVoteRegistrationDelegation, "f").toCore();
                break;
            case CertificateKind_1.CertificateKind.AuthCommitteeHot:
                core = __classPrivateFieldGet(this, _Certificate_authCommitteeHot, "f").toCore();
                break;
            case CertificateKind_1.CertificateKind.ResignCommitteeCold:
                core = __classPrivateFieldGet(this, _Certificate_resignCommitteeCold, "f").toCore();
                break;
            case CertificateKind_1.CertificateKind.DrepRegistration:
                core = __classPrivateFieldGet(this, _Certificate_drepRegistration, "f").toCore();
                break;
            case CertificateKind_1.CertificateKind.DrepUnregistration:
                core = __classPrivateFieldGet(this, _Certificate_drepUnregistration, "f").toCore();
                break;
            case CertificateKind_1.CertificateKind.UpdateDrep:
                core = __classPrivateFieldGet(this, _Certificate_updateDrep, "f").toCore();
                break;
            default:
                throw new util_1.InvalidStateError(`Unexpected kind value: ${__classPrivateFieldGet(this, _Certificate_kind, "f")}`);
        }
        return core;
    }
    static fromCore(certificate) {
        let cert;
        switch (certificate.__typename) {
            case Certificate_1.CertificateType.StakeRegistration:
                cert = Certificate.newStakeRegistration(StakeRegistration_1.StakeRegistration.fromCore(certificate));
                break;
            case Certificate_1.CertificateType.StakeDeregistration:
                cert = Certificate.newStakeDeregistration(StakeDeregistration_1.StakeDeregistration.fromCore(certificate));
                break;
            case Certificate_1.CertificateType.StakeDelegation:
                cert = Certificate.newStakeDelegation(StakeDelegation_1.StakeDelegation.fromCore(certificate));
                break;
            case Certificate_1.CertificateType.PoolRetirement:
                cert = Certificate.newPoolRetirement(PoolRetirement_1.PoolRetirement.fromCore(certificate));
                break;
            case Certificate_1.CertificateType.PoolRegistration:
                cert = Certificate.newPoolRegistration(PoolRegistration_1.PoolRegistration.fromCore(certificate));
                break;
            case Certificate_1.CertificateType.MIR:
                cert = Certificate.newMoveInstantaneousRewardsCert(MoveInstantaneousReward_1.MoveInstantaneousReward.fromCore(certificate));
                break;
            case Certificate_1.CertificateType.GenesisKeyDelegation:
                cert = Certificate.newGenesisKeyDelegation(GenesisKeyDelegation_1.GenesisKeyDelegation.fromCore(certificate));
                break;
            case Certificate_1.CertificateType.Registration:
                cert = Certificate.newRegistrationCert(Registration_1.Registration.fromCore(certificate));
                break;
            case Certificate_1.CertificateType.Unregistration:
                cert = Certificate.newUnregistrationCert(Unregistration_1.Unregistration.fromCore(certificate));
                break;
            case Certificate_1.CertificateType.VoteDelegation:
                cert = Certificate.newVoteDelegationCert(VoteDelegation_1.VoteDelegation.fromCore(certificate));
                break;
            case Certificate_1.CertificateType.StakeVoteDelegation:
                cert = Certificate.newStakeVoteDelegationCert(StakeVoteDelegation_1.StakeVoteDelegation.fromCore(certificate));
                break;
            case Certificate_1.CertificateType.StakeRegistrationDelegation:
                cert = Certificate.newStakeRegistrationDelegationCert(StakeRegistrationDelegation_1.StakeRegistrationDelegation.fromCore(certificate));
                break;
            case Certificate_1.CertificateType.VoteRegistrationDelegation:
                cert = Certificate.newVoteRegistrationDelegationCert(VoteRegistrationDelegation_1.VoteRegistrationDelegation.fromCore(certificate));
                break;
            case Certificate_1.CertificateType.StakeVoteRegistrationDelegation:
                cert = Certificate.newStakeVoteRegistrationDelegationCert(StakeVoteRegistrationDelegation_1.StakeVoteRegistrationDelegation.fromCore(certificate));
                break;
            case Certificate_1.CertificateType.AuthorizeCommitteeHot:
                cert = Certificate.newAuthCommitteeHotCert(AuthCommitteeHot_1.AuthCommitteeHot.fromCore(certificate));
                break;
            case Certificate_1.CertificateType.ResignCommitteeCold:
                cert = Certificate.newResignCommitteeColdCert(ResignCommitteeCold_1.ResignCommitteeCold.fromCore(certificate));
                break;
            case Certificate_1.CertificateType.RegisterDelegateRepresentative:
                cert = Certificate.newRegisterDelegateRepresentativeCert(RegisterDelegateRepresentative_1.RegisterDelegateRepresentative.fromCore(certificate));
                break;
            case Certificate_1.CertificateType.UnregisterDelegateRepresentative:
                cert = Certificate.newUnregisterDelegateRepresentativeCert(UnregisterDelegateRepresentative_1.UnregisterDelegateRepresentative.fromCore(certificate));
                break;
            case Certificate_1.CertificateType.UpdateDelegateRepresentative:
                cert = Certificate.newUpdateDelegateRepresentativeCert(UpdateDelegateRepresentative_1.UpdateDelegateRepresentative.fromCore(certificate));
                break;
            default:
                throw new util_1.InvalidStateError('Unexpected certificate type');
        }
        return cert;
    }
    static newStakeRegistration(stakeRegistration) {
        const cert = new Certificate();
        __classPrivateFieldSet(cert, _Certificate_stakeRegistration, stakeRegistration, "f");
        __classPrivateFieldSet(cert, _Certificate_kind, CertificateKind_1.CertificateKind.StakeRegistration, "f");
        return cert;
    }
    static newStakeDeregistration(stakeDeregistration) {
        const cert = new Certificate();
        __classPrivateFieldSet(cert, _Certificate_stakeDeregistration, stakeDeregistration, "f");
        __classPrivateFieldSet(cert, _Certificate_kind, CertificateKind_1.CertificateKind.StakeDeregistration, "f");
        return cert;
    }
    static newStakeDelegation(stakeDelegation) {
        const cert = new Certificate();
        __classPrivateFieldSet(cert, _Certificate_stakeDelegation, stakeDelegation, "f");
        __classPrivateFieldSet(cert, _Certificate_kind, CertificateKind_1.CertificateKind.StakeDelegation, "f");
        return cert;
    }
    static newPoolRegistration(poolRegistration) {
        const cert = new Certificate();
        __classPrivateFieldSet(cert, _Certificate_poolRegistration, poolRegistration, "f");
        __classPrivateFieldSet(cert, _Certificate_kind, CertificateKind_1.CertificateKind.PoolRegistration, "f");
        return cert;
    }
    static newPoolRetirement(poolRetirement) {
        const cert = new Certificate();
        __classPrivateFieldSet(cert, _Certificate_poolRetirement, poolRetirement, "f");
        __classPrivateFieldSet(cert, _Certificate_kind, CertificateKind_1.CertificateKind.PoolRetirement, "f");
        return cert;
    }
    static newGenesisKeyDelegation(genesisKeyDelegation) {
        const cert = new Certificate();
        __classPrivateFieldSet(cert, _Certificate_genesisKeyDelegation, genesisKeyDelegation, "f");
        __classPrivateFieldSet(cert, _Certificate_kind, CertificateKind_1.CertificateKind.GenesisKeyDelegation, "f");
        return cert;
    }
    static newMoveInstantaneousRewardsCert(moveInstantaneousRewards) {
        const cert = new Certificate();
        __classPrivateFieldSet(cert, _Certificate_moveInstantaneousReward, moveInstantaneousRewards, "f");
        __classPrivateFieldSet(cert, _Certificate_kind, CertificateKind_1.CertificateKind.MoveInstantaneousRewards, "f");
        return cert;
    }
    static newRegistrationCert(registration) {
        const cert = new Certificate();
        __classPrivateFieldSet(cert, _Certificate_registration, registration, "f");
        __classPrivateFieldSet(cert, _Certificate_kind, CertificateKind_1.CertificateKind.Registration, "f");
        return cert;
    }
    static newUnregistrationCert(unregistration) {
        const cert = new Certificate();
        __classPrivateFieldSet(cert, _Certificate_unregistration, unregistration, "f");
        __classPrivateFieldSet(cert, _Certificate_kind, CertificateKind_1.CertificateKind.Unregistration, "f");
        return cert;
    }
    static newVoteDelegationCert(voteDelegation) {
        const cert = new Certificate();
        __classPrivateFieldSet(cert, _Certificate_voteDelegation, voteDelegation, "f");
        __classPrivateFieldSet(cert, _Certificate_kind, CertificateKind_1.CertificateKind.VoteDelegation, "f");
        return cert;
    }
    static newStakeVoteDelegationCert(stakeVoteDelegation) {
        const cert = new Certificate();
        __classPrivateFieldSet(cert, _Certificate_stakeVoteDelegation, stakeVoteDelegation, "f");
        __classPrivateFieldSet(cert, _Certificate_kind, CertificateKind_1.CertificateKind.StakeVoteDelegation, "f");
        return cert;
    }
    static newStakeRegistrationDelegationCert(stakeRegistrationDelegation) {
        const cert = new Certificate();
        __classPrivateFieldSet(cert, _Certificate_stakeRegistrationDelegation, stakeRegistrationDelegation, "f");
        __classPrivateFieldSet(cert, _Certificate_kind, CertificateKind_1.CertificateKind.StakeRegistrationDelegation, "f");
        return cert;
    }
    static newVoteRegistrationDelegationCert(voteRegistrationDelegation) {
        const cert = new Certificate();
        __classPrivateFieldSet(cert, _Certificate_voteRegistrationDelegation, voteRegistrationDelegation, "f");
        __classPrivateFieldSet(cert, _Certificate_kind, CertificateKind_1.CertificateKind.VoteRegistrationDelegation, "f");
        return cert;
    }
    static newStakeVoteRegistrationDelegationCert(stakeVoteRegistrationDelegation) {
        const cert = new Certificate();
        __classPrivateFieldSet(cert, _Certificate_stakeVoteRegistrationDelegation, stakeVoteRegistrationDelegation, "f");
        __classPrivateFieldSet(cert, _Certificate_kind, CertificateKind_1.CertificateKind.StakeVoteRegistrationDelegation, "f");
        return cert;
    }
    static newAuthCommitteeHotCert(authCommitteeHot) {
        const cert = new Certificate();
        __classPrivateFieldSet(cert, _Certificate_authCommitteeHot, authCommitteeHot, "f");
        __classPrivateFieldSet(cert, _Certificate_kind, CertificateKind_1.CertificateKind.AuthCommitteeHot, "f");
        return cert;
    }
    static newResignCommitteeColdCert(resignCommitteeCold) {
        const cert = new Certificate();
        __classPrivateFieldSet(cert, _Certificate_resignCommitteeCold, resignCommitteeCold, "f");
        __classPrivateFieldSet(cert, _Certificate_kind, CertificateKind_1.CertificateKind.ResignCommitteeCold, "f");
        return cert;
    }
    static newRegisterDelegateRepresentativeCert(drepRegistration) {
        const cert = new Certificate();
        __classPrivateFieldSet(cert, _Certificate_drepRegistration, drepRegistration, "f");
        __classPrivateFieldSet(cert, _Certificate_kind, CertificateKind_1.CertificateKind.DrepRegistration, "f");
        return cert;
    }
    static newUnregisterDelegateRepresentativeCert(drepUnregistration) {
        const cert = new Certificate();
        __classPrivateFieldSet(cert, _Certificate_drepUnregistration, drepUnregistration, "f");
        __classPrivateFieldSet(cert, _Certificate_kind, CertificateKind_1.CertificateKind.DrepUnregistration, "f");
        return cert;
    }
    static newUpdateDelegateRepresentativeCert(updateDrep) {
        const cert = new Certificate();
        __classPrivateFieldSet(cert, _Certificate_updateDrep, updateDrep, "f");
        __classPrivateFieldSet(cert, _Certificate_kind, CertificateKind_1.CertificateKind.UpdateDrep, "f");
        return cert;
    }
    kind() {
        return __classPrivateFieldGet(this, _Certificate_kind, "f");
    }
    asStakeRegistration() {
        return __classPrivateFieldGet(this, _Certificate_stakeRegistration, "f");
    }
    asStakeDeregistration() {
        return __classPrivateFieldGet(this, _Certificate_stakeDeregistration, "f");
    }
    asStakeDelegation() {
        return __classPrivateFieldGet(this, _Certificate_stakeDelegation, "f");
    }
    asPoolRegistration() {
        return __classPrivateFieldGet(this, _Certificate_poolRegistration, "f");
    }
    asPoolRetirement() {
        return __classPrivateFieldGet(this, _Certificate_poolRetirement, "f");
    }
    asGenesisKeyDelegation() {
        return __classPrivateFieldGet(this, _Certificate_genesisKeyDelegation, "f");
    }
    asMoveInstantaneousRewardsCert() {
        return __classPrivateFieldGet(this, _Certificate_moveInstantaneousReward, "f");
    }
    asRegistrationCert() {
        return __classPrivateFieldGet(this, _Certificate_registration, "f");
    }
    asUnregistrationCert() {
        return __classPrivateFieldGet(this, _Certificate_unregistration, "f");
    }
    asVoteDelegationCert() {
        return __classPrivateFieldGet(this, _Certificate_voteDelegation, "f");
    }
    asStakeVoteDelegationCert() {
        return __classPrivateFieldGet(this, _Certificate_stakeVoteDelegation, "f");
    }
    asStakeRegistrationDelegationCert() {
        return __classPrivateFieldGet(this, _Certificate_stakeRegistrationDelegation, "f");
    }
    asVoteRegistrationDelegationCert() {
        return __classPrivateFieldGet(this, _Certificate_voteRegistrationDelegation, "f");
    }
    asStakeVoteRegistrationDelegationCert() {
        return __classPrivateFieldGet(this, _Certificate_stakeVoteRegistrationDelegation, "f");
    }
    asAuthCommitteeHotCert() {
        return __classPrivateFieldGet(this, _Certificate_authCommitteeHot, "f");
    }
    asResignCommitteeColdCert() {
        return __classPrivateFieldGet(this, _Certificate_resignCommitteeCold, "f");
    }
    asRegisterDelegateRepresentativeCert() {
        return __classPrivateFieldGet(this, _Certificate_drepRegistration, "f");
    }
    asUnregisterDelegateRepresentativeCert() {
        return __classPrivateFieldGet(this, _Certificate_drepUnregistration, "f");
    }
    asUpdateDelegateRepresentativeCert() {
        return __classPrivateFieldGet(this, _Certificate_updateDrep, "f");
    }
}
exports.Certificate = Certificate;
_Certificate_kind = new WeakMap(), _Certificate_genesisKeyDelegation = new WeakMap(), _Certificate_moveInstantaneousReward = new WeakMap(), _Certificate_poolRegistration = new WeakMap(), _Certificate_poolRetirement = new WeakMap(), _Certificate_stakeDelegation = new WeakMap(), _Certificate_stakeDeregistration = new WeakMap(), _Certificate_stakeRegistration = new WeakMap(), _Certificate_registration = new WeakMap(), _Certificate_unregistration = new WeakMap(), _Certificate_voteDelegation = new WeakMap(), _Certificate_stakeVoteDelegation = new WeakMap(), _Certificate_stakeRegistrationDelegation = new WeakMap(), _Certificate_voteRegistrationDelegation = new WeakMap(), _Certificate_stakeVoteRegistrationDelegation = new WeakMap(), _Certificate_authCommitteeHot = new WeakMap(), _Certificate_resignCommitteeCold = new WeakMap(), _Certificate_drepRegistration = new WeakMap(), _Certificate_drepUnregistration = new WeakMap(), _Certificate_updateDrep = new WeakMap(), _Certificate_originalBytes = new WeakMap();
//# sourceMappingURL=Certificate.js.map