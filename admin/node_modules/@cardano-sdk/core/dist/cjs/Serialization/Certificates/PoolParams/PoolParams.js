"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _PoolParams_operator, _PoolParams_vrfKeyHash, _PoolParams_pledge, _PoolParams_cost, _PoolParams_margin, _PoolParams_rewardAccount, _PoolParams_poolOwners, _PoolParams_relays, _PoolParams_poolMetadata, _PoolParams_originalBytes;
Object.defineProperty(exports, "__esModule", { value: true });
exports.PoolParams = void 0;
const Crypto = __importStar(require("@cardano-sdk/crypto"));
const Address_1 = require("../../../Cardano/Address/Address");
const CBOR_1 = require("../../CBOR");
const Common_1 = require("../../Common");
const util_1 = require("@cardano-sdk/util");
const StakePool_1 = require("../../../Cardano/types/StakePool");
const PoolMetadata_1 = require("./PoolMetadata");
const Relay_1 = require("./Relay");
const UnitInterval_1 = require("../../Common/UnitInterval");
const RewardAccount_1 = require("../../../Cardano/Address/RewardAccount");
class PoolParams {
    constructor(operator, vrfKeyHash, pledge, cost, margin, rewardAccount, poolOwners, relays, poolMetadata) {
        _PoolParams_operator.set(this, void 0);
        _PoolParams_vrfKeyHash.set(this, void 0);
        _PoolParams_pledge.set(this, void 0);
        _PoolParams_cost.set(this, void 0);
        _PoolParams_margin.set(this, void 0);
        _PoolParams_rewardAccount.set(this, void 0);
        _PoolParams_poolOwners.set(this, void 0);
        _PoolParams_relays.set(this, void 0);
        _PoolParams_poolMetadata.set(this, void 0);
        _PoolParams_originalBytes.set(this, undefined);
        __classPrivateFieldSet(this, _PoolParams_operator, operator, "f");
        __classPrivateFieldSet(this, _PoolParams_vrfKeyHash, vrfKeyHash, "f");
        __classPrivateFieldSet(this, _PoolParams_pledge, pledge, "f");
        __classPrivateFieldSet(this, _PoolParams_cost, cost, "f");
        __classPrivateFieldSet(this, _PoolParams_margin, margin, "f");
        __classPrivateFieldSet(this, _PoolParams_rewardAccount, rewardAccount, "f");
        __classPrivateFieldSet(this, _PoolParams_poolOwners, poolOwners, "f");
        __classPrivateFieldSet(this, _PoolParams_relays, relays, "f");
        __classPrivateFieldSet(this, _PoolParams_poolMetadata, poolMetadata, "f");
    }
    toCbor() {
        const writer = new CBOR_1.CborWriter();
        if (__classPrivateFieldGet(this, _PoolParams_originalBytes, "f"))
            return __classPrivateFieldGet(this, _PoolParams_originalBytes, "f");
        writer.writeStartArray(PoolParams.subgroupCount);
        return this.toFlattenedCbor(writer);
    }
    toFlattenedCbor(writer) {
        writer.writeByteString(Buffer.from(__classPrivateFieldGet(this, _PoolParams_operator, "f"), 'hex'));
        writer.writeByteString(Buffer.from(__classPrivateFieldGet(this, _PoolParams_vrfKeyHash, "f"), 'hex'));
        writer.writeInt(__classPrivateFieldGet(this, _PoolParams_pledge, "f"));
        writer.writeInt(__classPrivateFieldGet(this, _PoolParams_cost, "f"));
        writer.writeEncodedValue(Buffer.from(__classPrivateFieldGet(this, _PoolParams_margin, "f").toCbor(), 'hex'));
        writer.writeByteString(Buffer.from(__classPrivateFieldGet(this, _PoolParams_rewardAccount, "f").toAddress().toBytes(), 'hex'));
        writer.writeEncodedValue(Buffer.from(__classPrivateFieldGet(this, _PoolParams_poolOwners, "f").toCbor(), 'hex'));
        writer.writeStartArray(__classPrivateFieldGet(this, _PoolParams_relays, "f").length);
        for (const relay of __classPrivateFieldGet(this, _PoolParams_relays, "f"))
            writer.writeEncodedValue(Buffer.from(relay.toCbor(), 'hex'));
        if (__classPrivateFieldGet(this, _PoolParams_poolMetadata, "f")) {
            writer.writeEncodedValue(Buffer.from(__classPrivateFieldGet(this, _PoolParams_poolMetadata, "f").toCbor(), 'hex'));
        }
        else {
            writer.writeNull();
        }
        return writer.encodeAsHex();
    }
    static fromCbor(cbor) {
        const reader = new CBOR_1.CborReader(cbor);
        const length = reader.readStartArray();
        if (length !== PoolParams.subgroupCount)
            throw new util_1.InvalidArgumentError('cbor', `Expected an array of ${PoolParams.subgroupCount} elements, but got an array of ${length} elements`);
        const params = PoolParams.fromFlattenedCbor(reader);
        __classPrivateFieldSet(params, _PoolParams_originalBytes, cbor, "f");
        return params;
    }
    static fromFlattenedCbor(reader) {
        const operator = Crypto.Ed25519KeyHashHex(util_1.HexBlob.fromBytes(reader.readByteString()));
        const vrfKeyHash = (0, StakePool_1.VrfVkHex)(util_1.HexBlob.fromBytes(reader.readByteString()));
        const pledge = reader.readInt();
        const cost = reader.readInt();
        const margin = UnitInterval_1.UnitInterval.fromCbor(util_1.HexBlob.fromBytes(reader.readEncodedValue()));
        const rewardAccount = Address_1.Address.fromBytes(util_1.HexBlob.fromBytes(reader.readByteString())).asReward();
        const relays = new Array();
        let poolMetadata;
        const poolOwner = Common_1.CborSet.fromCbor(util_1.HexBlob.fromBytes(reader.readEncodedValue()), Common_1.Hash.fromCbor);
        reader.readStartArray();
        while (reader.peekState() !== CBOR_1.CborReaderState.EndArray)
            relays.push(Relay_1.Relay.fromCbor(util_1.HexBlob.fromBytes(reader.readEncodedValue())));
        reader.readEndArray();
        if (reader.peekState() !== CBOR_1.CborReaderState.Null) {
            poolMetadata = PoolMetadata_1.PoolMetadata.fromCbor(util_1.HexBlob.fromBytes(reader.readEncodedValue()));
        }
        else {
            reader.readNull();
        }
        return new PoolParams(operator, vrfKeyHash, pledge, cost, margin, rewardAccount, poolOwner, relays, poolMetadata);
    }
    toCore() {
        const rewardAccountAddress = __classPrivateFieldGet(this, _PoolParams_rewardAccount, "f").toAddress();
        return {
            cost: __classPrivateFieldGet(this, _PoolParams_cost, "f"),
            id: StakePool_1.PoolId.fromKeyHash(__classPrivateFieldGet(this, _PoolParams_operator, "f")),
            margin: __classPrivateFieldGet(this, _PoolParams_margin, "f").toCore(),
            metadataJson: __classPrivateFieldGet(this, _PoolParams_poolMetadata, "f")?.toCore(),
            owners: __classPrivateFieldGet(this, _PoolParams_poolOwners, "f")
                .toCore()
                .map((keyHash) => (0, RewardAccount_1.createRewardAccount)(keyHash, rewardAccountAddress.getNetworkId())),
            pledge: __classPrivateFieldGet(this, _PoolParams_pledge, "f"),
            relays: __classPrivateFieldGet(this, _PoolParams_relays, "f").map((relay) => relay.toCore()),
            rewardAccount: __classPrivateFieldGet(this, _PoolParams_rewardAccount, "f").toAddress().toBech32(),
            vrf: __classPrivateFieldGet(this, _PoolParams_vrfKeyHash, "f")
        };
    }
    static fromCore(params) {
        return new PoolParams(StakePool_1.PoolId.toKeyHash(params.id), params.vrf, params.pledge, params.cost, UnitInterval_1.UnitInterval.fromCore(params.margin), Address_1.Address.fromBech32(params.rewardAccount).asReward(), Common_1.CborSet.fromCore(params.owners.map((owner) => Crypto.Ed25519KeyHashHex(Address_1.Address.fromBech32(owner).asReward().getPaymentCredential().hash)), Common_1.Hash.fromCore), params.relays.map((relay) => Relay_1.Relay.fromCore(relay)), params.metadataJson ? PoolMetadata_1.PoolMetadata.fromCore(params.metadataJson) : undefined);
    }
    operator() {
        return __classPrivateFieldGet(this, _PoolParams_operator, "f");
    }
    setOperator(operator) {
        __classPrivateFieldSet(this, _PoolParams_operator, operator, "f");
        __classPrivateFieldSet(this, _PoolParams_originalBytes, undefined, "f");
    }
    vrfKeyHash() {
        return __classPrivateFieldGet(this, _PoolParams_vrfKeyHash, "f");
    }
    setVrfKeyHash(vrfKeyHash) {
        __classPrivateFieldSet(this, _PoolParams_vrfKeyHash, vrfKeyHash, "f");
        __classPrivateFieldSet(this, _PoolParams_originalBytes, undefined, "f");
    }
    pledge() {
        return __classPrivateFieldGet(this, _PoolParams_pledge, "f");
    }
    setPledge(pledge) {
        __classPrivateFieldSet(this, _PoolParams_pledge, pledge, "f");
        __classPrivateFieldSet(this, _PoolParams_originalBytes, undefined, "f");
    }
    cost() {
        return __classPrivateFieldGet(this, _PoolParams_cost, "f");
    }
    setCost(cost) {
        __classPrivateFieldSet(this, _PoolParams_cost, cost, "f");
        __classPrivateFieldSet(this, _PoolParams_originalBytes, undefined, "f");
    }
    margin() {
        return __classPrivateFieldGet(this, _PoolParams_margin, "f");
    }
    setMargin(margin) {
        __classPrivateFieldSet(this, _PoolParams_margin, margin, "f");
        __classPrivateFieldSet(this, _PoolParams_originalBytes, undefined, "f");
    }
    rewardAccount() {
        return __classPrivateFieldGet(this, _PoolParams_rewardAccount, "f");
    }
    setRewardAccount(rewardAccount) {
        __classPrivateFieldSet(this, _PoolParams_rewardAccount, rewardAccount, "f");
        __classPrivateFieldSet(this, _PoolParams_originalBytes, undefined, "f");
    }
    poolOwners() {
        return __classPrivateFieldGet(this, _PoolParams_poolOwners, "f");
    }
    setPoolOwners(poolOwners) {
        __classPrivateFieldSet(this, _PoolParams_poolOwners, poolOwners, "f");
        __classPrivateFieldSet(this, _PoolParams_originalBytes, undefined, "f");
    }
    relays() {
        return __classPrivateFieldGet(this, _PoolParams_relays, "f");
    }
    setRelays(relays) {
        __classPrivateFieldSet(this, _PoolParams_relays, [...relays], "f");
        __classPrivateFieldSet(this, _PoolParams_originalBytes, undefined, "f");
    }
    poolMetadata() {
        return __classPrivateFieldGet(this, _PoolParams_poolMetadata, "f");
    }
    setPoolMetadata(poolMetadata) {
        __classPrivateFieldSet(this, _PoolParams_poolMetadata, poolMetadata, "f");
        __classPrivateFieldSet(this, _PoolParams_originalBytes, undefined, "f");
    }
}
exports.PoolParams = PoolParams;
_PoolParams_operator = new WeakMap(), _PoolParams_vrfKeyHash = new WeakMap(), _PoolParams_pledge = new WeakMap(), _PoolParams_cost = new WeakMap(), _PoolParams_margin = new WeakMap(), _PoolParams_rewardAccount = new WeakMap(), _PoolParams_poolOwners = new WeakMap(), _PoolParams_relays = new WeakMap(), _PoolParams_poolMetadata = new WeakMap(), _PoolParams_originalBytes = new WeakMap();
PoolParams.subgroupCount = 9;
//# sourceMappingURL=PoolParams.js.map