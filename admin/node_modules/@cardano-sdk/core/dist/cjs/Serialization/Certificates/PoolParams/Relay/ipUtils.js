"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.byteArrayToIPv6String = exports.ipV6StringToByteArray = exports.byteArrayToIpV4String = exports.ipV4StringToByteArray = void 0;
const ip_address_1 = require("ip-address");
const util_1 = require("@cardano-sdk/util");
const ipV4StringToByteArray = (address) => {
    if (!ip_address_1.Address4.isValid(address))
        throw new util_1.InvalidArgumentError('address', `Invalid IP V4 string: ${address}`);
    return new Uint8Array(address.split('.').map((segment) => Number.parseInt(segment)));
};
exports.ipV4StringToByteArray = ipV4StringToByteArray;
const byteArrayToIpV4String = (byteArray) => {
    if (byteArray.length !== 4)
        throw new util_1.InvalidArgumentError('byteArray', `Invalid IP V4 byte array, expected 4 bytes, but got ${byteArray.length}`);
    return [...byteArray].map((octect) => octect.toString()).join('.');
};
exports.byteArrayToIpV4String = byteArrayToIpV4String;
const ipV6StringToByteArray = (address) => {
    if (!ip_address_1.Address6.isValid(address))
        throw new util_1.InvalidArgumentError('address', `Invalid IP V6 string: ${address}`);
    const addressV6 = new ip_address_1.Address6(address).toUnsignedByteArray();
    const filler = Array.from({ length: 16 })
        .fill(0, 0, 16)
        .slice(0, 16 - addressV6.length);
    return new Uint8Array([...filler, ...addressV6]);
};
exports.ipV6StringToByteArray = ipV6StringToByteArray;
const byteArrayToIPv6String = (byteArray) => {
    const addressV6 = ip_address_1.Address6.fromUnsignedByteArray([...byteArray]);
    return addressV6.canonicalForm();
};
exports.byteArrayToIPv6String = byteArrayToIPv6String;
//# sourceMappingURL=ipUtils.js.map