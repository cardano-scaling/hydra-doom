"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StateQueryError = exports.TxSubmissionError = exports.ChainSyncError = exports.GeneralCardanoNodeError = exports.CardanoNodeError = exports.TxSubmissionErrorCode = exports.StateQueryErrorCode = exports.ChainSyncErrorCode = exports.GeneralCardanoNodeErrorCode = void 0;
const ts_custom_error_1 = require("ts-custom-error");
var GeneralCardanoNodeErrorCode;
(function (GeneralCardanoNodeErrorCode) {
    GeneralCardanoNodeErrorCode[GeneralCardanoNodeErrorCode["ServerNotReady"] = 503] = "ServerNotReady";
    GeneralCardanoNodeErrorCode[GeneralCardanoNodeErrorCode["Unknown"] = 500] = "Unknown";
    GeneralCardanoNodeErrorCode[GeneralCardanoNodeErrorCode["ConnectionFailure"] = -1] = "ConnectionFailure";
})(GeneralCardanoNodeErrorCode = exports.GeneralCardanoNodeErrorCode || (exports.GeneralCardanoNodeErrorCode = {}));
var ChainSyncErrorCode;
(function (ChainSyncErrorCode) {
    ChainSyncErrorCode[ChainSyncErrorCode["IntersectionNotFound"] = 1000] = "IntersectionNotFound";
    ChainSyncErrorCode[ChainSyncErrorCode["IntersectionInterleaved"] = 1001] = "IntersectionInterleaved";
})(ChainSyncErrorCode = exports.ChainSyncErrorCode || (exports.ChainSyncErrorCode = {}));
var StateQueryErrorCode;
(function (StateQueryErrorCode) {
    StateQueryErrorCode[StateQueryErrorCode["AcquireLedgerStateFailure"] = 2000] = "AcquireLedgerStateFailure";
    StateQueryErrorCode[StateQueryErrorCode["EraMismatch"] = 2001] = "EraMismatch";
    StateQueryErrorCode[StateQueryErrorCode["UnavailableInCurrentEra"] = 2002] = "UnavailableInCurrentEra";
    StateQueryErrorCode[StateQueryErrorCode["AcquiredExpired"] = 2003] = "AcquiredExpired";
    StateQueryErrorCode[StateQueryErrorCode["InvalidGenesis"] = 2004] = "InvalidGenesis";
})(StateQueryErrorCode = exports.StateQueryErrorCode || (exports.StateQueryErrorCode = {}));
var TxSubmissionErrorCode;
(function (TxSubmissionErrorCode) {
    TxSubmissionErrorCode[TxSubmissionErrorCode["EraMismatch"] = 3005] = "EraMismatch";
    TxSubmissionErrorCode[TxSubmissionErrorCode["InvalidSignatories"] = 3100] = "InvalidSignatories";
    TxSubmissionErrorCode[TxSubmissionErrorCode["MissingSignatories"] = 3101] = "MissingSignatories";
    TxSubmissionErrorCode[TxSubmissionErrorCode["MissingScripts"] = 3102] = "MissingScripts";
    TxSubmissionErrorCode[TxSubmissionErrorCode["FailingNativeScript"] = 3103] = "FailingNativeScript";
    TxSubmissionErrorCode[TxSubmissionErrorCode["ExtraneousScripts"] = 3104] = "ExtraneousScripts";
    TxSubmissionErrorCode[TxSubmissionErrorCode["MissingMetadataHash"] = 3105] = "MissingMetadataHash";
    TxSubmissionErrorCode[TxSubmissionErrorCode["MissingMetadata"] = 3106] = "MissingMetadata";
    TxSubmissionErrorCode[TxSubmissionErrorCode["MetadataHashMismatch"] = 3107] = "MetadataHashMismatch";
    TxSubmissionErrorCode[TxSubmissionErrorCode["InvalidMetadata"] = 3108] = "InvalidMetadata";
    TxSubmissionErrorCode[TxSubmissionErrorCode["MissingRedeemers"] = 3109] = "MissingRedeemers";
    TxSubmissionErrorCode[TxSubmissionErrorCode["ExtraneousRedeemers"] = 3110] = "ExtraneousRedeemers";
    TxSubmissionErrorCode[TxSubmissionErrorCode["MissingDatums"] = 3111] = "MissingDatums";
    TxSubmissionErrorCode[TxSubmissionErrorCode["ExtraneousDatums"] = 3112] = "ExtraneousDatums";
    TxSubmissionErrorCode[TxSubmissionErrorCode["ScriptIntegrityHashMismatch"] = 3113] = "ScriptIntegrityHashMismatch";
    TxSubmissionErrorCode[TxSubmissionErrorCode["OrphanScriptInputs"] = 3114] = "OrphanScriptInputs";
    TxSubmissionErrorCode[TxSubmissionErrorCode["MissingCostModels"] = 3115] = "MissingCostModels";
    TxSubmissionErrorCode[TxSubmissionErrorCode["MalformedScripts"] = 3116] = "MalformedScripts";
    TxSubmissionErrorCode[TxSubmissionErrorCode["UnknownOutputReferences"] = 3117] = "UnknownOutputReferences";
    TxSubmissionErrorCode[TxSubmissionErrorCode["OutsideOfValidityInterval"] = 3118] = "OutsideOfValidityInterval";
    TxSubmissionErrorCode[TxSubmissionErrorCode["TransactionTooLarge"] = 3119] = "TransactionTooLarge";
    TxSubmissionErrorCode[TxSubmissionErrorCode["ValueTooLarge"] = 3120] = "ValueTooLarge";
    TxSubmissionErrorCode[TxSubmissionErrorCode["EmptyInputSet"] = 3121] = "EmptyInputSet";
    TxSubmissionErrorCode[TxSubmissionErrorCode["TransactionFeeTooSmall"] = 3122] = "TransactionFeeTooSmall";
    TxSubmissionErrorCode[TxSubmissionErrorCode["ValueNotConserved"] = 3123] = "ValueNotConserved";
    TxSubmissionErrorCode[TxSubmissionErrorCode["NetworkMismatch"] = 3124] = "NetworkMismatch";
    TxSubmissionErrorCode[TxSubmissionErrorCode["InsufficientlyFundedOutputs"] = 3125] = "InsufficientlyFundedOutputs";
    TxSubmissionErrorCode[TxSubmissionErrorCode["BootstrapAttributesTooLarge"] = 3126] = "BootstrapAttributesTooLarge";
    TxSubmissionErrorCode[TxSubmissionErrorCode["MintingOrBurningAda"] = 3127] = "MintingOrBurningAda";
    TxSubmissionErrorCode[TxSubmissionErrorCode["InsufficientCollateral"] = 3128] = "InsufficientCollateral";
    TxSubmissionErrorCode[TxSubmissionErrorCode["CollateralLockedByScript"] = 3129] = "CollateralLockedByScript";
    TxSubmissionErrorCode[TxSubmissionErrorCode["UnforeseeableSlot"] = 3130] = "UnforeseeableSlot";
    TxSubmissionErrorCode[TxSubmissionErrorCode["TooManyCollateralInputs"] = 3131] = "TooManyCollateralInputs";
    TxSubmissionErrorCode[TxSubmissionErrorCode["MissingCollateralInputs"] = 3132] = "MissingCollateralInputs";
    TxSubmissionErrorCode[TxSubmissionErrorCode["NonAdaCollateral"] = 3133] = "NonAdaCollateral";
    TxSubmissionErrorCode[TxSubmissionErrorCode["ExecutionUnitsTooLarge"] = 3134] = "ExecutionUnitsTooLarge";
    TxSubmissionErrorCode[TxSubmissionErrorCode["TotalCollateralMismatch"] = 3135] = "TotalCollateralMismatch";
    TxSubmissionErrorCode[TxSubmissionErrorCode["SpendsMismatch"] = 3136] = "SpendsMismatch";
    TxSubmissionErrorCode[TxSubmissionErrorCode["UnauthorizedVote"] = 3137] = "UnauthorizedVote";
    TxSubmissionErrorCode[TxSubmissionErrorCode["UnknownGovernanceProposal"] = 3138] = "UnknownGovernanceProposal";
    TxSubmissionErrorCode[TxSubmissionErrorCode["InvalidProtocolParametersUpdate"] = 3139] = "InvalidProtocolParametersUpdate";
    TxSubmissionErrorCode[TxSubmissionErrorCode["UnknownStakePool"] = 3140] = "UnknownStakePool";
    TxSubmissionErrorCode[TxSubmissionErrorCode["IncompleteWithdrawals"] = 3141] = "IncompleteWithdrawals";
    TxSubmissionErrorCode[TxSubmissionErrorCode["RetirementTooLate"] = 3142] = "RetirementTooLate";
    TxSubmissionErrorCode[TxSubmissionErrorCode["StakePoolCostTooLow"] = 3143] = "StakePoolCostTooLow";
    TxSubmissionErrorCode[TxSubmissionErrorCode["MetadataHashTooLarge"] = 3144] = "MetadataHashTooLarge";
    TxSubmissionErrorCode[TxSubmissionErrorCode["CredentialAlreadyRegistered"] = 3145] = "CredentialAlreadyRegistered";
    TxSubmissionErrorCode[TxSubmissionErrorCode["UnknownCredential"] = 3146] = "UnknownCredential";
    TxSubmissionErrorCode[TxSubmissionErrorCode["NonEmptyRewardAccount"] = 3147] = "NonEmptyRewardAccount";
    TxSubmissionErrorCode[TxSubmissionErrorCode["InvalidGenesisDelegation"] = 3148] = "InvalidGenesisDelegation";
    TxSubmissionErrorCode[TxSubmissionErrorCode["InvalidMIRTransfer"] = 3149] = "InvalidMIRTransfer";
    TxSubmissionErrorCode[TxSubmissionErrorCode["ForbiddenWithdrawal"] = 3150] = "ForbiddenWithdrawal";
    TxSubmissionErrorCode[TxSubmissionErrorCode["CredentialDepositMismatch"] = 3151] = "CredentialDepositMismatch";
    TxSubmissionErrorCode[TxSubmissionErrorCode["DRepAlreadyRegistered"] = 3152] = "DRepAlreadyRegistered";
    TxSubmissionErrorCode[TxSubmissionErrorCode["DRepNotRegistered"] = 3153] = "DRepNotRegistered";
    TxSubmissionErrorCode[TxSubmissionErrorCode["UnknownConstitutionalCommitteeMember"] = 3154] = "UnknownConstitutionalCommitteeMember";
    TxSubmissionErrorCode[TxSubmissionErrorCode["GovernanceProposalDepositMismatch"] = 3155] = "GovernanceProposalDepositMismatch";
    TxSubmissionErrorCode[TxSubmissionErrorCode["ConflictingCommitteeUpdate"] = 3156] = "ConflictingCommitteeUpdate";
    TxSubmissionErrorCode[TxSubmissionErrorCode["InvalidCommitteeUpdate"] = 3157] = "InvalidCommitteeUpdate";
    TxSubmissionErrorCode[TxSubmissionErrorCode["TreasuryWithdrawalMismatch"] = 3158] = "TreasuryWithdrawalMismatch";
    TxSubmissionErrorCode[TxSubmissionErrorCode["InvalidOrMissingPreviousProposal"] = 3159] = "InvalidOrMissingPreviousProposal";
    TxSubmissionErrorCode[TxSubmissionErrorCode["VotingOnExpiredActions"] = 3160] = "VotingOnExpiredActions";
    TxSubmissionErrorCode[TxSubmissionErrorCode["ExecutionBudgetOutOfBounds"] = 3161] = "ExecutionBudgetOutOfBounds";
    TxSubmissionErrorCode[TxSubmissionErrorCode["InvalidHardForkVersionBump"] = 3162] = "InvalidHardForkVersionBump";
    TxSubmissionErrorCode[TxSubmissionErrorCode["ConstitutionGuardrailsHashMismatch"] = 3163] = "ConstitutionGuardrailsHashMismatch";
    TxSubmissionErrorCode[TxSubmissionErrorCode["ConflictingInputsAndReferences"] = 3164] = "ConflictingInputsAndReferences";
    TxSubmissionErrorCode[TxSubmissionErrorCode["UnauthorizedGovernanceAction"] = 3165] = "UnauthorizedGovernanceAction";
    TxSubmissionErrorCode[TxSubmissionErrorCode["ReferenceScriptsTooLarge"] = 3166] = "ReferenceScriptsTooLarge";
    TxSubmissionErrorCode[TxSubmissionErrorCode["UnknownVoters"] = 3167] = "UnknownVoters";
    TxSubmissionErrorCode[TxSubmissionErrorCode["UnrecognizedCertificateType"] = 3998] = "UnrecognizedCertificateType";
    TxSubmissionErrorCode[TxSubmissionErrorCode["DeserialisationFailure"] = -32602] = "DeserialisationFailure";
})(TxSubmissionErrorCode = exports.TxSubmissionErrorCode || (exports.TxSubmissionErrorCode = {}));
class CardanoNodeError extends ts_custom_error_1.CustomError {
    constructor(code, data, message) {
        super(message);
        this.code = code;
        this.data = data;
    }
}
exports.CardanoNodeError = CardanoNodeError;
class GeneralCardanoNodeError extends CardanoNodeError {
}
exports.GeneralCardanoNodeError = GeneralCardanoNodeError;
class ChainSyncError extends CardanoNodeError {
}
exports.ChainSyncError = ChainSyncError;
class TxSubmissionError extends CardanoNodeError {
}
exports.TxSubmissionError = TxSubmissionError;
class StateQueryError extends CardanoNodeError {
}
exports.StateQueryError = StateQueryError;
//# sourceMappingURL=CardanoNodeErrors.js.map