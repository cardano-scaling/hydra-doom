"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isDrepNotRegistered = exports.isUnknownCredential = exports.isDrepAlreadyRegistered = exports.isCredentialAlreadyRegistered = exports.isUnknownOutputReferences = exports.isIncompleteWithdrawalsError = exports.isValueNotConservedError = exports.isOutsideOfValidityIntervalError = exports.isProviderError = exports.asTxSubmissionErrorCode = exports.asGeneralCardanoNodeErrorCode = exports.asStateQueryErrorCode = exports.asChainSyncErrorCode = exports.isGeneralCardanoNodeErrorCode = exports.isStateQueryErrorCode = exports.isTxSubmissionErrorCode = exports.isChainSyncErrorCode = exports.asCardanoNodeError = exports.asGeneralCardanoNodeError = exports.asStateQueryError = exports.asChainSyncError = exports.asTxSubmissionError = void 0;
const types_1 = require("../types");
const errors_1 = require("../../errors");
const util_1 = require("@cardano-sdk/util");
const asSpecificCardanoNodeError = (ErrorType) => (error) => {
    if (Array.isArray(error)) {
        for (const err of error) {
            if (err instanceof ErrorType) {
                if ((0, util_1.isProductionEnvironment)())
                    (0, util_1.stripStackTrace)(err);
                return err;
            }
        }
        return null;
    }
    if (error instanceof ErrorType) {
        if ((0, util_1.isProductionEnvironment)())
            (0, util_1.stripStackTrace)(error);
        return error;
    }
    return null;
};
exports.asTxSubmissionError = asSpecificCardanoNodeError(types_1.TxSubmissionError);
exports.asChainSyncError = asSpecificCardanoNodeError(types_1.ChainSyncError);
exports.asStateQueryError = asSpecificCardanoNodeError(types_1.StateQueryError);
exports.asGeneralCardanoNodeError = asSpecificCardanoNodeError(types_1.GeneralCardanoNodeError);
const asCardanoNodeError = (error) => (0, exports.asGeneralCardanoNodeError)(error) ||
    (0, exports.asTxSubmissionError)(error) ||
    (0, exports.asStateQueryError)(error) ||
    (0, exports.asChainSyncError)(error) ||
    new types_1.GeneralCardanoNodeError(types_1.GeneralCardanoNodeErrorCode.Unknown, error, 'Unknown Cardano node error, see "data"');
exports.asCardanoNodeError = asCardanoNodeError;
const stateQueryErrorCodes = new Set(Object.values(types_1.StateQueryErrorCode));
const generalCardanoNodeErrorCodes = new Set(Object.values(types_1.GeneralCardanoNodeErrorCode));
const txSubmissionErrorCodes = new Set(Object.values(types_1.TxSubmissionErrorCode));
const chainSyncErrorCodes = new Set(Object.values(types_1.ChainSyncErrorCode));
const isChainSyncErrorCode = (code) => typeof code === 'number' && chainSyncErrorCodes.has(code);
exports.isChainSyncErrorCode = isChainSyncErrorCode;
const isTxSubmissionErrorCode = (code) => typeof code === 'number' && txSubmissionErrorCodes.has(code);
exports.isTxSubmissionErrorCode = isTxSubmissionErrorCode;
const isStateQueryErrorCode = (code) => typeof code === 'number' && stateQueryErrorCodes.has(code);
exports.isStateQueryErrorCode = isStateQueryErrorCode;
const isGeneralCardanoNodeErrorCode = (code) => typeof code === 'number' && generalCardanoNodeErrorCodes.has(code);
exports.isGeneralCardanoNodeErrorCode = isGeneralCardanoNodeErrorCode;
const asChainSyncErrorCode = (code) => (0, exports.isChainSyncErrorCode)(code) ? code : null;
exports.asChainSyncErrorCode = asChainSyncErrorCode;
const asStateQueryErrorCode = (code) => (0, exports.isStateQueryErrorCode)(code) ? code : null;
exports.asStateQueryErrorCode = asStateQueryErrorCode;
const asGeneralCardanoNodeErrorCode = (code) => (0, exports.isGeneralCardanoNodeErrorCode)(code) ? code : null;
exports.asGeneralCardanoNodeErrorCode = asGeneralCardanoNodeErrorCode;
const asTxSubmissionErrorCode = (code) => (0, exports.isTxSubmissionErrorCode)(code) ? code : null;
exports.asTxSubmissionErrorCode = asTxSubmissionErrorCode;
const isProviderError = (error) => error instanceof errors_1.ProviderError;
exports.isProviderError = isProviderError;
const isOutsideOfValidityIntervalError = (error) => error instanceof types_1.TxSubmissionError && error.code === types_1.TxSubmissionErrorCode.OutsideOfValidityInterval;
exports.isOutsideOfValidityIntervalError = isOutsideOfValidityIntervalError;
const isValueNotConservedError = (error) => error instanceof types_1.TxSubmissionError && error.code === types_1.TxSubmissionErrorCode.ValueNotConserved;
exports.isValueNotConservedError = isValueNotConservedError;
const isIncompleteWithdrawalsError = (error) => error instanceof types_1.TxSubmissionError && error.code === types_1.TxSubmissionErrorCode.IncompleteWithdrawals;
exports.isIncompleteWithdrawalsError = isIncompleteWithdrawalsError;
const isUnknownOutputReferences = (error) => error instanceof types_1.TxSubmissionError && error.code === types_1.TxSubmissionErrorCode.UnknownOutputReferences;
exports.isUnknownOutputReferences = isUnknownOutputReferences;
const isCredentialAlreadyRegistered = (error) => error instanceof types_1.TxSubmissionError && error.code === types_1.TxSubmissionErrorCode.CredentialAlreadyRegistered;
exports.isCredentialAlreadyRegistered = isCredentialAlreadyRegistered;
const isDrepAlreadyRegistered = (error) => error instanceof types_1.TxSubmissionError && error.code === types_1.TxSubmissionErrorCode.DRepAlreadyRegistered;
exports.isDrepAlreadyRegistered = isDrepAlreadyRegistered;
const isUnknownCredential = (error) => error instanceof types_1.TxSubmissionError && error.code === types_1.TxSubmissionErrorCode.UnknownCredential;
exports.isUnknownCredential = isUnknownCredential;
const isDrepNotRegistered = (error) => error instanceof types_1.TxSubmissionError && error.code === types_1.TxSubmissionErrorCode.DRepNotRegistered;
exports.isDrepNotRegistered = isDrepNotRegistered;
//# sourceMappingURL=cardanoNodeErrors.js.map