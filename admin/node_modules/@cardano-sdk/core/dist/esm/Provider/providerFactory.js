var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _ProviderFactory_providers;
export class ProviderFactory {
    constructor() {
        _ProviderFactory_providers.set(this, new Map());
    }
    register(name, providerFactoryMethod) {
        __classPrivateFieldGet(this, _ProviderFactory_providers, "f").set(name, providerFactoryMethod);
    }
    create(name, params, logger) {
        if (!__classPrivateFieldGet(this, _ProviderFactory_providers, "f").has(name))
            throw new Error(`Provider unsupported: ${name}`);
        return __classPrivateFieldGet(this, _ProviderFactory_providers, "f").get(name)(params, logger);
    }
    getProviders() {
        return [...__classPrivateFieldGet(this, _ProviderFactory_providers, "f").keys()];
    }
}
_ProviderFactory_providers = new WeakMap();
//# sourceMappingURL=providerFactory.js.map