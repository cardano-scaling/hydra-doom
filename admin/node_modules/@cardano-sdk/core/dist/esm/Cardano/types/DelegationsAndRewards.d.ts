import { DelegateRepresentative } from './Governance.js';
import { Lovelace } from './Value.js';
import { Metadatum } from './AuxiliaryData.js';
import { PoolId, PoolIdHex, StakePool } from './StakePool/index.js';
import { RewardAccount } from '../Address/index.js';
export interface DelegationsAndRewards {
    delegate?: PoolId;
    rewards: Lovelace;
}
export interface Delegatee {
    currentEpoch?: StakePool;
    nextEpoch?: StakePool;
    nextNextEpoch?: StakePool;
}
export declare enum StakeCredentialStatus {
    Registering = "REGISTERING",
    Registered = "REGISTERED",
    Unregistering = "UNREGISTERING",
    Unregistered = "UNREGISTERED"
}
export declare type DRepDelegatee = {
    delegateRepresentative: DelegateRepresentative;
};
export interface RewardAccountInfo {
    address: RewardAccount;
    credentialStatus: StakeCredentialStatus;
    delegatee?: Delegatee;
    dRepDelegatee?: DRepDelegatee;
    rewardBalance: Lovelace;
    deposit?: Lovelace;
}
export interface Cip17Pool {
    id: PoolIdHex;
    weight: number;
    name?: string;
    ticker?: string;
}
export interface Cip17DelegationPortfolio {
    name: string;
    pools: Cip17Pool[];
    description?: string;
    author?: string;
}
export declare const DelegationMetadataLabel = 6862n;
export declare type DelegationPortfolioMetadata = Exclude<Cip17DelegationPortfolio, 'pools'> & {
    pools: Pick<Cip17Pool, 'id' | 'weight'>[];
};
export declare const portfolioMetadataFromCip17: (cip17: Cip17DelegationPortfolio) => DelegationPortfolioMetadata;
export declare const cip17FromMetadatum: (portfolio: Metadatum) => Cip17DelegationPortfolio;
//# sourceMappingURL=DelegationsAndRewards.d.ts.map