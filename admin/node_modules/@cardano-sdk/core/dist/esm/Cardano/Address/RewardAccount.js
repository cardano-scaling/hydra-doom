import { Address, CredentialType } from './Address.js';
import { Ed25519KeyHashHex, Hash28ByteBase16 } from '@cardano-sdk/crypto';
import { typedBech32 } from '@cardano-sdk/util';
import { RewardAddress } from './RewardAddress.js';
export const RewardAccount = (value) => typedBech32(value, ['stake', 'stake_test'], 47);
RewardAccount.toHash = (rewardAccount) => Ed25519KeyHashHex(Address.fromBech32(rewardAccount).asReward().getPaymentCredential().hash);
RewardAccount.fromCredential = (credential, networkId) => RewardAccount(RewardAddress.fromCredentials(networkId, { hash: credential.hash, type: credential.type }).toAddress().toBech32());
RewardAccount.toNetworkId = (rewardAccount) => Address.fromBech32(rewardAccount).asReward().toAddress().getNetworkId();
export const createRewardAccount = (stakeKeyHash, networkId) => RewardAccount(RewardAddress.fromCredentials(networkId, { hash: Hash28ByteBase16(stakeKeyHash), type: CredentialType.KeyHash })
    .toAddress()
    .toBech32());
//# sourceMappingURL=RewardAccount.js.map