import { ChainSyncError, ChainSyncErrorCode, GeneralCardanoNodeError, GeneralCardanoNodeErrorCode, StateQueryError, StateQueryErrorCode, TxSubmissionError, TxSubmissionErrorCode } from '../types/index.js';
import { ProviderError } from '../../errors.js';
import { isProductionEnvironment, stripStackTrace } from '@cardano-sdk/util';
const asSpecificCardanoNodeError = (ErrorType) => (error) => {
    if (Array.isArray(error)) {
        for (const err of error) {
            if (err instanceof ErrorType) {
                if (isProductionEnvironment())
                    stripStackTrace(err);
                return err;
            }
        }
        return null;
    }
    if (error instanceof ErrorType) {
        if (isProductionEnvironment())
            stripStackTrace(error);
        return error;
    }
    return null;
};
export const asTxSubmissionError = asSpecificCardanoNodeError(TxSubmissionError);
export const asChainSyncError = asSpecificCardanoNodeError(ChainSyncError);
export const asStateQueryError = asSpecificCardanoNodeError(StateQueryError);
export const asGeneralCardanoNodeError = asSpecificCardanoNodeError(GeneralCardanoNodeError);
export const asCardanoNodeError = (error) => asGeneralCardanoNodeError(error) ||
    asTxSubmissionError(error) ||
    asStateQueryError(error) ||
    asChainSyncError(error) ||
    new GeneralCardanoNodeError(GeneralCardanoNodeErrorCode.Unknown, error, 'Unknown Cardano node error, see "data"');
const stateQueryErrorCodes = new Set(Object.values(StateQueryErrorCode));
const generalCardanoNodeErrorCodes = new Set(Object.values(GeneralCardanoNodeErrorCode));
const txSubmissionErrorCodes = new Set(Object.values(TxSubmissionErrorCode));
const chainSyncErrorCodes = new Set(Object.values(ChainSyncErrorCode));
export const isChainSyncErrorCode = (code) => typeof code === 'number' && chainSyncErrorCodes.has(code);
export const isTxSubmissionErrorCode = (code) => typeof code === 'number' && txSubmissionErrorCodes.has(code);
export const isStateQueryErrorCode = (code) => typeof code === 'number' && stateQueryErrorCodes.has(code);
export const isGeneralCardanoNodeErrorCode = (code) => typeof code === 'number' && generalCardanoNodeErrorCodes.has(code);
export const asChainSyncErrorCode = (code) => isChainSyncErrorCode(code) ? code : null;
export const asStateQueryErrorCode = (code) => isStateQueryErrorCode(code) ? code : null;
export const asGeneralCardanoNodeErrorCode = (code) => isGeneralCardanoNodeErrorCode(code) ? code : null;
export const asTxSubmissionErrorCode = (code) => isTxSubmissionErrorCode(code) ? code : null;
export const isProviderError = (error) => error instanceof ProviderError;
export const isOutsideOfValidityIntervalError = (error) => error instanceof TxSubmissionError && error.code === TxSubmissionErrorCode.OutsideOfValidityInterval;
export const isValueNotConservedError = (error) => error instanceof TxSubmissionError && error.code === TxSubmissionErrorCode.ValueNotConserved;
export const isIncompleteWithdrawalsError = (error) => error instanceof TxSubmissionError && error.code === TxSubmissionErrorCode.IncompleteWithdrawals;
export const isUnknownOutputReferences = (error) => error instanceof TxSubmissionError && error.code === TxSubmissionErrorCode.UnknownOutputReferences;
export const isCredentialAlreadyRegistered = (error) => error instanceof TxSubmissionError && error.code === TxSubmissionErrorCode.CredentialAlreadyRegistered;
export const isDrepAlreadyRegistered = (error) => error instanceof TxSubmissionError && error.code === TxSubmissionErrorCode.DRepAlreadyRegistered;
export const isUnknownCredential = (error) => error instanceof TxSubmissionError && error.code === TxSubmissionErrorCode.UnknownCredential;
export const isDrepNotRegistered = (error) => error instanceof TxSubmissionError && error.code === TxSubmissionErrorCode.DRepNotRegistered;
//# sourceMappingURL=cardanoNodeErrors.js.map