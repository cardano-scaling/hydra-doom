"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServerNotReady = exports.getServerHealth = void 0;
const cross_fetch_1 = __importDefault(require("cross-fetch"));
const ts_custom_error_1 = require("ts-custom-error");
const getServerHealth = async (options) => {
    const response = await (0, cross_fetch_1.default)(`${options?.connection?.address.http}/health`);
    const responseJson = await response.json();
    if (response.ok) {
        return responseJson;
    }
    else {
        throw new Error(response.statusText);
    }
};
exports.getServerHealth = getServerHealth;
class ServerNotReady extends ts_custom_error_1.CustomError {
    constructor(health) {
        super();
        this.message =
            `Server is not ready. Network synchronization at ${health.networkSynchronization}%`;
    }
}
exports.ServerNotReady = ServerNotReady;
//# sourceMappingURL=ServerHealth.js.map