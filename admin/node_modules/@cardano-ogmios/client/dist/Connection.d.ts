import { WebSocket, CloseEvent } from './IsomorphicWebSocket';
export interface ConnectionConfig {
    host?: string;
    port?: number;
    tls?: boolean;
    maxPayload?: number;
}
export interface Connection extends Required<ConnectionConfig> {
    maxPayload: number;
    address: {
        http: string;
        webSocket: string;
    };
}
export interface InteractionContext {
    connection: Connection;
    socket: WebSocket;
}
export type InteractionType = ('LongRunning' | 'OneTime');
export type Mirror = {
    [k: string]: unknown;
};
export type WebSocketErrorHandler = (error: Error) => void;
export type WebSocketCloseHandler = (code: CloseEvent['code'], reason: CloseEvent['reason']) => void;
export declare class JSONRPCError extends Error {
    code: number;
    data?: any;
    id?: any;
    constructor(code: number, message: string, data?: any, id?: any);
    static tryFrom(any: any): JSONRPCError;
}
export declare function createConnectionObject(config?: ConnectionConfig): Connection;
export declare const createInteractionContext: (errorHandler: WebSocketErrorHandler, closeHandler: WebSocketCloseHandler, options?: {
    connection?: ConnectionConfig;
    maxEventListeners?: number;
}) => Promise<InteractionContext>;
export declare const baseRequest: {
    jsonrpc: string;
};
export declare const ensureSocketIsOpen: (socket: WebSocket) => void;
export declare const send: <T>(send: (socket: WebSocket) => Promise<T>, context: InteractionContext) => Promise<T>;
export declare const Method: <Request_1 extends {
    method: string;
    params?: any;
}, Response_1 extends {
    method: string;
    id?: {
        requestId?: string;
    };
}, A>(req: {
    method: Request_1["method"];
    params?: Request_1["params"];
}, res: {
    handler?: (response: Response_1, resolve: (value?: A | PromiseLike<A>) => void, reject: (reason?: any) => void) => void;
}, context: InteractionContext) => Promise<A>;
//# sourceMappingURL=Connection.d.ts.map