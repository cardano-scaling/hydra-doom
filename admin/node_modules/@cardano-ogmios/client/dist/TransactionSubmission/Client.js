"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createTransactionSubmissionClient = void 0;
const Connection_1 = require("../Connection");
const util_1 = require("../util");
const submitTransaction = __importStar(require("./submitTransaction"));
const evaluateTransaction = __importStar(require("./evaluateTransaction"));
const METHODS = {
    SUBMIT: 'submitTransaction',
    EVALUATE: 'evaluateTransaction'
};
const matchSubmitTransaction = (data) => {
    const json = util_1.safeJSON.parse(data);
    if ('method' in json) {
        if (json.method === METHODS.SUBMIT) {
            return json;
        }
    }
    return null;
};
const matchEvaluateTransaction = (data) => {
    const json = util_1.safeJSON.parse(data);
    if ('method' in json) {
        if (json.method === METHODS.EVALUATE) {
            return json;
        }
    }
    return null;
};
const createTransactionSubmissionClient = async (context) => {
    const { socket } = context;
    const submitTransactionResponse = (0, util_1.eventEmitterToGenerator)(socket, 'message', matchSubmitTransaction)();
    const evaluateTransactionResponse = (0, util_1.eventEmitterToGenerator)(socket, 'message', matchEvaluateTransaction)();
    return Promise.resolve({
        context,
        evaluateTransaction: (serializedTransaction, additionalUtxo) => {
            const method = METHODS.EVALUATE;
            return (0, Connection_1.send)(async (socket) => {
                socket.send(util_1.safeJSON.stringify({
                    ...Connection_1.baseRequest,
                    method,
                    params: {
                        ...(additionalUtxo !== undefined ? { additionalUtxo } : {}),
                        transaction: { cbor: serializedTransaction }
                    }
                }));
                const { value: response } = await evaluateTransactionResponse.next();
                return new Promise((resolve, reject) => { evaluateTransaction.handler(response, resolve, reject); });
            }, context);
        },
        submitTransaction: async (serializedTransaction) => {
            const method = METHODS.SUBMIT;
            return (0, Connection_1.send)(async (socket) => {
                socket.send(util_1.safeJSON.stringify({
                    ...Connection_1.baseRequest,
                    method,
                    params: { transaction: { cbor: serializedTransaction } }
                }));
                const { value: response } = await submitTransactionResponse.next();
                return new Promise((resolve, reject) => { submitTransaction.handler(response, resolve, reject); });
            }, context);
        },
        shutdown: () => {
            (0, Connection_1.ensureSocketIsOpen)(socket);
            return new Promise((resolve, reject) => {
                socket.once('close', () => resolve());
                socket.once('error', reject);
                socket.close();
            });
        }
    });
};
exports.createTransactionSubmissionClient = createTransactionSubmissionClient;
//# sourceMappingURL=Client.js.map