import { InteractionContext } from '../Connection';
import { constitution, epoch, eraStart, eraSummaries, ledgerTip, liveStakeDistribution, networkBlockHeight, networkStartTime, networkTip, projectedRewards, proposedProtocolParameters, protocolParameters, rewardAccountSummaries, rewardsProvenance, stakePools, utxo } from './query';
import { Ogmios, AcquireLedgerStateSuccess, AnyStakeCredential, GenesisAlonzo, GenesisByron, GenesisConway, GenesisShelley, Origin, Point, UtxoByAddresses, UtxoByOutputReferences, ValueAdaOnly } from '@cardano-ogmios/schema';
export interface LedgerStateQueryClient {
    context: InteractionContext;
    acquireLedgerState(point: Point | Origin): Promise<void>;
    releaseLedgerState(): Promise<void>;
    shutdown(): Promise<void>;
    constitution(): ReturnType<typeof constitution>;
    epoch(): ReturnType<typeof epoch>;
    eraStart(): ReturnType<typeof eraStart>;
    eraSummaries: () => ReturnType<typeof eraSummaries>;
    genesisConfiguration(era: 'byron'): Promise<GenesisByron>;
    genesisConfiguration(era: 'shelley'): Promise<GenesisShelley>;
    genesisConfiguration(era: 'alonzo'): Promise<GenesisAlonzo>;
    genesisConfiguration(era: 'conway'): Promise<GenesisConway>;
    ledgerTip(): ReturnType<typeof ledgerTip>;
    liveStakeDistribution(): ReturnType<typeof liveStakeDistribution>;
    networkBlockHeight(): ReturnType<typeof networkBlockHeight>;
    networkStartTime(): ReturnType<typeof networkStartTime>;
    networkTip(): ReturnType<typeof networkTip>;
    projectedRewards(filter: {
        stake?: ValueAdaOnly[];
        scripts?: AnyStakeCredential[];
        keys?: AnyStakeCredential[];
    }): ReturnType<typeof projectedRewards>;
    proposedProtocolParameters(): ReturnType<typeof proposedProtocolParameters>;
    protocolParameters(): ReturnType<typeof protocolParameters>;
    rewardAccountSummaries(filter: {
        scripts?: AnyStakeCredential[];
        keys?: AnyStakeCredential[];
    }): ReturnType<typeof rewardAccountSummaries>;
    rewardsProvenance(): ReturnType<typeof rewardsProvenance>;
    stakePools(): ReturnType<typeof stakePools>;
    utxo(filter?: UtxoByOutputReferences | UtxoByAddresses): ReturnType<typeof utxo>;
}
export declare function createLedgerStateQueryClient(context: InteractionContext, options?: {
    point?: Point | Origin;
}): Promise<LedgerStateQueryClient>;
export declare function isAcquireLedgerStateSuccess(response: any): response is AcquireLedgerStateSuccess;
export declare function isReleaseLedgerStateResponse(response: any): response is Ogmios['ReleaseLedgerStateResponse'];
//# sourceMappingURL=Client.d.ts.map