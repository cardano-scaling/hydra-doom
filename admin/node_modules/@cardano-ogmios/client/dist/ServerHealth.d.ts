import { CustomError } from 'ts-custom-error';
import { Connection } from './Connection';
import { Era, Tip } from '@cardano-ogmios/schema';
export interface ServerHealth {
    currentEra: Era;
    lastKnownTip: Tip;
    lastTipUpdate: string | null;
    metrics: {
        runtimeStats?: {
            gcCpuTime: number;
            cpuTime: number;
            maxHeapSize: number;
            currentHeapSize: number;
        };
        sessionDurations: {
            max: number;
            mean: number;
            min: number;
        };
        totalConnections: number;
        totalMessages: number;
        totalUnrouted: number;
        activeConnections: number;
    };
    startTime: string;
    network: 'mainnet' | 'preview' | 'preprod';
    networkSynchronization: number;
    version: string;
}
export declare const getServerHealth: (options?: {
    connection?: Connection;
}) => Promise<ServerHealth>;
export declare class ServerNotReady extends CustomError {
    constructor(health: ServerHealth);
}
//# sourceMappingURL=ServerHealth.d.ts.map