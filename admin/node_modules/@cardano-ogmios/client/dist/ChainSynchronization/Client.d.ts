import { CustomError } from 'ts-custom-error';
import { InteractionContext } from '../Connection';
import { Intersection } from './findIntersection';
import { ChainSynchronizationMessageHandlers } from './nextBlock';
import { Point, Origin } from '@cardano-ogmios/schema';
export interface ChainSynchronizationClient {
    context: InteractionContext;
    shutdown: () => Promise<void>;
    resume: (points?: (Point | Origin)[], inFlight?: number) => Promise<Intersection>;
}
export declare function createChainSynchronizationClient(context: InteractionContext, messageHandlers: ChainSynchronizationMessageHandlers, options?: {
    sequential?: boolean;
}): Promise<ChainSynchronizationClient>;
export declare class TipIsOriginError extends CustomError {
    constructor();
}
export declare function createPointFromCurrentTip(context?: InteractionContext): Promise<Point>;
//# sourceMappingURL=Client.d.ts.map