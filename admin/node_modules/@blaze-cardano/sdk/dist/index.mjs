// src/blaze.ts
import { CborSet, VkeyWitness } from "@blaze-cardano/core";
import { TxBuilder } from "@blaze-cardano/tx";
var Blaze = class _Blaze {
  /**
   * Constructs a new instance of the Blaze class.
   * @param {ProviderType} provider - The provider to use for interacting with the blockchain.
   * @param {WalletType} wallet - The wallet to use for managing funds and signing transactions.
   * @private
   */
  constructor(provider, wallet, params) {
    this.provider = provider;
    this.wallet = wallet;
    this.params = params;
  }
  static async from(provider, wallet) {
    const params = await provider.getParameters();
    return new _Blaze(provider, wallet, params);
  }
  /**
   * Creates a new transaction using the provider and wallet.
   * @returns {TxBuilder} - The newly created transaction builder.
   */
  newTransaction() {
    return new TxBuilder(this.params).addPreCompleteHook(async (tx) => {
      const myUtxos = await this.wallet.getUnspentOutputs();
      const changeAddress = await this.wallet.getChangeAddress();
      tx.setNetworkId(await this.wallet.getNetworkId()).addUnspentOutputs(myUtxos).setChangeAddress(changeAddress, false).useEvaluator((x, y) => this.provider.evaluateTransaction(x, y), false);
    });
  }
  /**
   * Signs a transaction using the wallet.
   * @param {Transaction} tx - The transaction to sign.
   * @returns {Promise<Transaction>} - The signed transaction.
   */
  async signTransaction(tx) {
    const signed = await this.wallet.signTransaction(tx, true);
    const ws = tx.witnessSet();
    const vkeys = ws.vkeys()?.toCore() ?? [];
    const signedKeys = signed.vkeys();
    if (!signedKeys) {
      throw new Error(
        "signTransaction: no signed keys in wallet witness response"
      );
    }
    if (signedKeys.toCore().some(([vkey]) => vkeys.some(([key2]) => vkey == key2))) {
      throw new Error("signTransaction: some keys were already signed");
    }
    ws.setVkeys(
      CborSet.fromCore(
        [...signedKeys.toCore(), ...vkeys],
        VkeyWitness.fromCore
      )
    );
    tx.setWitnessSet(ws);
    return tx;
  }
  /**
   * Submits a transaction to the blockchain.
   * @param {Transaction} tx - The transaction to submit.
   * @returns {Promise<TransactionId>} - The transaction ID.
   * @throws {Error} If the transaction submission fails.
   * @description This method sends the provided transaction to the blockchain network
   * using the configured wallet, or the configured provider if set.
   */
  async submitTransaction(tx, useProvider) {
    return useProvider ? this.provider.postTransactionToChain(tx) : this.wallet.postTransaction(tx);
  }
};

// src/index.ts
export * from "@blaze-cardano/query";
export * from "@blaze-cardano/tx";
export * from "@blaze-cardano/wallet";
export * from "@blaze-cardano/uplc";
import * as Core from "@blaze-cardano/core";
export {
  Blaze,
  Core
};
