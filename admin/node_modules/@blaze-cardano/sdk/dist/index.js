"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, "default"), secondTarget && __copyProps(secondTarget, mod, "default"));
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  Blaze: () => Blaze,
  Core: () => Core
});
module.exports = __toCommonJS(src_exports);

// src/blaze.ts
var import_core = require("@blaze-cardano/core");
var import_tx = require("@blaze-cardano/tx");
var Blaze = class _Blaze {
  /**
   * Constructs a new instance of the Blaze class.
   * @param {ProviderType} provider - The provider to use for interacting with the blockchain.
   * @param {WalletType} wallet - The wallet to use for managing funds and signing transactions.
   * @private
   */
  constructor(provider, wallet, params) {
    this.provider = provider;
    this.wallet = wallet;
    this.params = params;
  }
  static async from(provider, wallet) {
    const params = await provider.getParameters();
    return new _Blaze(provider, wallet, params);
  }
  /**
   * Creates a new transaction using the provider and wallet.
   * @returns {TxBuilder} - The newly created transaction builder.
   */
  newTransaction() {
    return new import_tx.TxBuilder(this.params).addPreCompleteHook(async (tx) => {
      const myUtxos = await this.wallet.getUnspentOutputs();
      const changeAddress = await this.wallet.getChangeAddress();
      tx.setNetworkId(await this.wallet.getNetworkId()).addUnspentOutputs(myUtxos).setChangeAddress(changeAddress, false).useEvaluator((x, y) => this.provider.evaluateTransaction(x, y), false);
    });
  }
  /**
   * Signs a transaction using the wallet.
   * @param {Transaction} tx - The transaction to sign.
   * @returns {Promise<Transaction>} - The signed transaction.
   */
  async signTransaction(tx) {
    const signed = await this.wallet.signTransaction(tx, true);
    const ws = tx.witnessSet();
    const vkeys = ws.vkeys()?.toCore() ?? [];
    const signedKeys = signed.vkeys();
    if (!signedKeys) {
      throw new Error(
        "signTransaction: no signed keys in wallet witness response"
      );
    }
    if (signedKeys.toCore().some(([vkey]) => vkeys.some(([key2]) => vkey == key2))) {
      throw new Error("signTransaction: some keys were already signed");
    }
    ws.setVkeys(
      import_core.CborSet.fromCore(
        [...signedKeys.toCore(), ...vkeys],
        import_core.VkeyWitness.fromCore
      )
    );
    tx.setWitnessSet(ws);
    return tx;
  }
  /**
   * Submits a transaction to the blockchain.
   * @param {Transaction} tx - The transaction to submit.
   * @returns {Promise<TransactionId>} - The transaction ID.
   * @throws {Error} If the transaction submission fails.
   * @description This method sends the provided transaction to the blockchain network
   * using the configured wallet, or the configured provider if set.
   */
  async submitTransaction(tx, useProvider) {
    return useProvider ? this.provider.postTransactionToChain(tx) : this.wallet.postTransaction(tx);
  }
};

// src/index.ts
__reExport(src_exports, require("@blaze-cardano/query"), module.exports);
__reExport(src_exports, require("@blaze-cardano/tx"), module.exports);
__reExport(src_exports, require("@blaze-cardano/wallet"), module.exports);
__reExport(src_exports, require("@blaze-cardano/uplc"), module.exports);
var Core = __toESM(require("@blaze-cardano/core"));
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Blaze,
  Core,
  ...require("@blaze-cardano/query"),
  ...require("@blaze-cardano/tx"),
  ...require("@blaze-cardano/wallet"),
  ...require("@blaze-cardano/uplc")
});
