import * as schema$1 from '@cardano-ogmios/schema';
import { PointOrOrigin, IntersectionFound, NextBlockResponse, SubmitTransactionSuccess, Utxo, EvaluateTransactionSuccess, AcquireLedgerStateSuccess, ReleaseLedgerStateResponse, QueryLedgerStateConstitutionResponse, QueryLedgerStateConstitutionalCommitteeResponse, QueryLedgerStateEpochResponse, QueryLedgerStateEraStartResponse, QueryLedgerStateEraSummariesResponse, QueryLedgerStateLiveStakeDistributionResponse, ValueAdaOnly, AnyStakeCredential, QueryLedgerStateProjectedRewardsResponse, QueryLedgerStateProposedProtocolParametersResponse, QueryLedgerStateProtocolParametersResponse, QueryLedgerStateRewardAccountSummariesResponse, QueryLedgerStateRewardsProvenanceResponse, StakePoolId, QueryLedgerStateStakePoolsResponse, QueryLedgerStateTipResponse, QueryLedgerStateTreasuryAndReservesResponse, UtxoByOutputReferences, UtxoByAddresses, WholeUtxo, QueryLedgerStateUtxoResponse, QueryNetworkBlockHeightResponse, EraWithGenesis, QueryNetworkGenesisConfigurationResponse, QueryNetworkStartTimeResponse, QueryNetworkTipResponse, AcquireMempoolResponse, NextTransactionResponse, TransactionId, HasTransactionResponse, SizeOfMempoolResponse, ReleaseMempoolResponse } from '@cardano-ogmios/schema';
import WebSocket from 'isomorphic-ws';

function _mergeNamespaces(n, m) {
  m.forEach(function (e) {
    e && typeof e !== 'string' && !Array.isArray(e) && Object.keys(e).forEach(function (k) {
      if (k !== 'default' && !(k in n)) {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  });
  return Object.freeze(n);
}

var schema = /*#__PURE__*/_mergeNamespaces({
  __proto__: null
}, [schema$1]);

declare class Ogmios$1 {
    url: string;
    private ws;
    private requests;
    private constructor();
    private setupEventListeners;
    static new(url: string): Promise<Ogmios$1>;
    static fromDemeter(network: `mainnet` | `preview`, apiKey: `dmtr_ogmios${string}`, region: `ogmios-m1`): Promise<Ogmios$1>;
    private static generateId;
    request<T extends {
        params: object;
    }, R extends {
        result: any;
    } | {
        error: object;
    }>(method: string, params: T["params"]): Promise<Extract<R, "result">>;
    connect(): WebSocket;
    kill(): Promise<void>;
    findIntersection(points?: PointOrOrigin[]): Promise<IntersectionFound["result"]>;
    nextBlock(): Promise<NextBlockResponse["result"]>;
    submitTransaction(transaction: {
        cbor: string;
    }): Promise<SubmitTransactionSuccess["result"]>;
    evaluateTransaction(transaction: {
        cbor: string;
    }, additionalUtxos?: Utxo): Promise<EvaluateTransactionSuccess["result"]>;
    acquireLedgerState(point: PointOrOrigin): Promise<AcquireLedgerStateSuccess["result"]>;
    releaseLedgerState(): Promise<ReleaseLedgerStateResponse["result"]>;
    queryLedgerStateConstitution(): Promise<QueryLedgerStateConstitutionResponse["result"]>;
    queryLedgerStateConstitutionalCommittee(): Promise<QueryLedgerStateConstitutionalCommitteeResponse["result"]>;
    queryLedgerStateEpoch(): Promise<QueryLedgerStateEpochResponse["result"]>;
    queryLedgerStateEraStart(): Promise<QueryLedgerStateEraStartResponse["result"]>;
    queryLedgerStateEraSummaries(): Promise<QueryLedgerStateEraSummariesResponse["result"]>;
    queryLedgerStateLiveStakeDistribution(): Promise<QueryLedgerStateLiveStakeDistributionResponse["result"]>;
    queryLedgerStateProjectedRewards(params: {
        stake?: ValueAdaOnly[];
        scripts?: AnyStakeCredential[];
        keys?: AnyStakeCredential[];
    }): Promise<QueryLedgerStateProjectedRewardsResponse["result"]>;
    queryLedgerStateProposedProtocolParameters(): Promise<QueryLedgerStateProposedProtocolParametersResponse["result"]>;
    queryLedgerStateProtocolParameters(): Promise<QueryLedgerStateProtocolParametersResponse["result"]>;
    queryLedgerStateRewardAccountSummaries(params: {
        scripts?: AnyStakeCredential[];
        keys?: AnyStakeCredential[];
    }): Promise<QueryLedgerStateRewardAccountSummariesResponse["result"]>;
    queryLedgerStateRewardsProvenance(): Promise<QueryLedgerStateRewardsProvenanceResponse["result"]>;
    queryLedgerStateStakePools(params?: {
        stakePools: {
            id: StakePoolId;
        }[];
    }): Promise<QueryLedgerStateStakePoolsResponse["result"]>;
    queryLedgerStateTip(): Promise<QueryLedgerStateTipResponse["result"]>;
    queryLedgerStateTreasuryAndReserves(): Promise<QueryLedgerStateTreasuryAndReservesResponse["result"]>;
    queryLedgerStateUtxo(params?: UtxoByOutputReferences | UtxoByAddresses | WholeUtxo): Promise<QueryLedgerStateUtxoResponse["result"]>;
    queryNetworkBlockHeight(): Promise<QueryNetworkBlockHeightResponse["result"]>;
    queryNetworkGenesisConfiguration(params: {
        era: EraWithGenesis;
    }): Promise<QueryNetworkGenesisConfigurationResponse["result"]>;
    queryNetworkStartTime(): Promise<QueryNetworkStartTimeResponse["result"]>;
    queryNetworkTip(): Promise<QueryNetworkTipResponse["result"]>;
    acquireMempool(): Promise<AcquireMempoolResponse["result"]>;
    nextTransaction(params?: {
        fields?: "all";
    }): Promise<NextTransactionResponse["result"]>;
    hasTransaction(params: {
        id: TransactionId;
    }): Promise<HasTransactionResponse["result"]>;
    sizeOfMempool(): Promise<SizeOfMempoolResponse["result"]>;
    releaseMempool(): Promise<ReleaseMempoolResponse["result"]>;
}

declare namespace unwrapped {
  export { Ogmios$1 as Ogmios };
}

/**
 * Ogmios class.
 * @remarks
 * This class is currently unimplemented.
 */
declare class Ogmios {
}

export { Ogmios, schema as Schema, unwrapped as Unwrapped };
