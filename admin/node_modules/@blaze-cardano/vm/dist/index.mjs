// src/vm.ts
import {
  Costmdls,
  HexBlob,
  Redeemer,
  Redeemers,
  SLOT_CONFIG_NETWORK,
  fromHex,
  toHex
} from "@blaze-cardano/core";
import * as U from "uplc-node";
function makeUplcEvaluator(params, overEstimateSteps, overEstimateMem, slotConfig = SLOT_CONFIG_NETWORK.Mainnet) {
  return (draft_tx, allUtxos) => {
    const uplcResults = U.eval_phase_two_raw(
      fromHex(draft_tx.toCbor()),
      // Convert the draft transaction to CBOR and hex format.
      allUtxos.map((x) => fromHex(x.input().toCbor())),
      // Convert all input UTXOs to CBOR and hex format.
      allUtxos.map((x) => fromHex(x.output().toCbor())),
      // Convert all output UTXOs to CBOR and hex format.
      fromHex(Costmdls.fromCore(params.costModels).toCbor()),
      // Convert the cost models to hex format.
      BigInt(
        Math.floor(
          params.maxExecutionUnitsPerTransaction.steps / (overEstimateSteps ?? 1)
        )
      ),
      // Calculate the estimated max execution steps.
      BigInt(
        Math.floor(
          params.maxExecutionUnitsPerTransaction.memory / (overEstimateMem ?? 1)
        )
      ),
      // Calculate the estimated max memory.
      BigInt(slotConfig.zeroTime),
      // Network-specific zero time for slot calculation.
      BigInt(slotConfig.zeroSlot),
      // Network-specific zero slot.
      slotConfig.slotLength
      // Network-specific slot length.
    );
    const redeemerValues = [];
    for (const redeemerBytes of uplcResults) {
      const redeemer = Redeemer.fromCbor(HexBlob(toHex(redeemerBytes)));
      const exUnits = redeemer.exUnits();
      exUnits.setSteps(
        BigInt(Math.round(Number(exUnits.steps()) * overEstimateSteps))
      );
      exUnits.setMem(
        BigInt(Math.round(Number(exUnits.mem()) * overEstimateMem))
      );
      redeemer.setExUnits(exUnits);
      redeemerValues.push(redeemer);
    }
    const redeemers = Redeemers.fromCore([]);
    redeemers.setValues(redeemerValues);
    return Promise.resolve(redeemers);
  };
}
export {
  makeUplcEvaluator
};
