// src/types.ts
import { typedHex } from "@cardano-sdk/util";
import * as C from "@cardano-sdk/core";
import * as Crypto from "@cardano-sdk/crypto";
var Slot = C.Cardano.Slot;
var Value = C.Serialization.Value;
var Transaction = C.Serialization.Transaction;
var TxCBOR = C.Serialization.TxCBOR;
var TransactionId = C.Cardano.TransactionId;
var TransactionBody = C.Serialization.TransactionBody;
var TransactionWitnessSet = C.Serialization.TransactionWitnessSet;
var TransactionUnspentOutput = C.Serialization.TransactionUnspentOutput;
var TransactionInput = C.Serialization.TransactionInput;
var TransactionOutput = C.Serialization.TransactionOutput;
var PlutusData = C.Serialization.PlutusData;
var ConstrPlutusData = C.Serialization.ConstrPlutusData;
var PlutusList = C.Serialization.PlutusList;
var PlutusMap = C.Serialization.PlutusMap;
var PlutusDataKind = C.Serialization.PlutusDataKind;
var Redeemers = C.Serialization.Redeemers;
var Redeemer = C.Serialization.Redeemer;
var RedeemerPurpose = C.Cardano.RedeemerPurpose;
var RedeemerTag = C.Serialization.RedeemerTag;
var Script = C.Serialization.Script;
var PolicyId = C.Cardano.PolicyId;
var AssetName = C.Cardano.AssetName;
var AssetId = C.Cardano.AssetId;
var Address = C.Cardano.Address;
var RewardAddress = C.Cardano.RewardAddress;
var AddressType = C.Cardano.AddressType;
var PaymentAddress = C.Cardano.PaymentAddress;
var Credential = C.Serialization.Credential;
var Ed25519PublicKeyHex2 = Crypto.Ed25519PublicKeyHex;
var Ed25519PrivateKey2 = Crypto.Ed25519PrivateKey;
var Ed25519PrivateNormalKeyHex = (value) => typedHex(value, 64);
var Ed25519PrivateExtendedKeyHex = (value) => typedHex(value, 128);
var Bip32PrivateKeyHex = (value) => typedHex(value, 192);
var Ed25519KeyHashHex2 = Crypto.Ed25519KeyHashHex;
var Hash28ByteBase162 = Crypto.Hash28ByteBase16;
var Hash32ByteBase162 = Crypto.Hash32ByteBase16;
var CredentialType = C.Cardano.CredentialType;
var Certificate = C.Serialization.Certificate;
var PoolId = C.Cardano.PoolId;
var StakeRegistration = C.Serialization.StakeRegistration;
var StakeDelegation = C.Serialization.StakeDelegation;
var CertificateType = C.Cardano.CertificateType;
var VkeyWitness = C.Serialization.VkeyWitness;
var Ed25519SignatureHex2 = Crypto.Ed25519SignatureHex;
var Ed25519PublicKey2 = Crypto.Ed25519PublicKey;
var Ed25519Signature2 = Crypto.Ed25519Signature;
var Bip32PrivateKey2 = Crypto.Bip32PrivateKey;
var Bip32PublicKey2 = Crypto.Bip32PublicKey;
var PlutusLanguageVersion = C.Cardano.PlutusLanguageVersion;
var NativeScript = C.Serialization.NativeScript;
var ScriptPubkey = C.Serialization.ScriptPubkey;
var ScriptAll = C.Serialization.ScriptAll;
var ScriptAny = C.Serialization.ScriptAny;
var ScriptNOfK = C.Serialization.ScriptNOfK;
var TimelockStart = C.Serialization.TimelockStart;
var TimelockExpiry = C.Serialization.TimelockExpiry;
var PlutusV1Script = C.Serialization.PlutusV1Script;
var PlutusV2Script = C.Serialization.PlutusV2Script;
var PlutusV3Script = C.Serialization.PlutusV3Script;
var Costmdls = C.Serialization.Costmdls;
var CostModel = C.Serialization.CostModel;
var CborWriter = C.Serialization.CborWriter;
var CborReader = C.Serialization.CborReader;
var CborReaderState = C.Serialization.CborReaderState;
var RewardAccount = C.Cardano.RewardAccount;
var Hash = C.Serialization.Hash;
var DatumHash = Crypto.Hash32ByteBase16;
var Datum = C.Serialization.Datum;
var ExUnits = C.Serialization.ExUnits;
var NetworkId = C.Cardano.NetworkId;
var DatumKind = C.Serialization.DatumKind;
var AuxiliaryData = C.Serialization.AuxiliaryData;
var Metadata = C.Serialization.GeneralTransactionMetadata;
var Metadatum = C.Serialization.TransactionMetadatum;
var MetadatumMap = C.Serialization.MetadatumMap;
var MetadatumList = C.Serialization.MetadatumList;
var TransactionMetadatumKind = C.Serialization.TransactionMetadatumKind;
var SLOT_CONFIG_NETWORK = {
  Mainnet: { zeroTime: 1596059091e3, zeroSlot: 4492800, slotLength: 1e3 },
  Preview: { zeroTime: 1666656e6, zeroSlot: 0, slotLength: 1e3 },
  Preprod: {
    zeroTime: 16540416e5 + 1728e6,
    zeroSlot: 86400,
    slotLength: 1e3
  }
};

// src/util.ts
import * as C2 from "@cardano-sdk/core";
import { HexBlob, typedHex as typedHex2 } from "@cardano-sdk/util";
import { sha256 } from "@noble/hashes/sha256";
import * as sha3 from "@noble/hashes/sha3";
import blake from "blakejs";
import * as bip39 from "@scure/bip39";
import { ed25519 as ed } from "@noble/curves/ed25519";
import { wordlist } from "@scure/bip39/wordlists/english";
function getPaymentAddress(address) {
  const bech = address.toBech32();
  if (bech.__opaqueString == "RewardAccount") {
    throw new Error(
      "getPaymentAddress: failed because a reward account was passed in!"
    );
  }
  return bech;
}
function PolicyIdToHash(policy) {
  return policy;
}
function HashAsPubKeyHex(hash) {
  return hash;
}
function fromHex(hexString) {
  if (hexString.length % 2 !== 0) {
    throw new Error("Invalid hexString length");
  }
  const byteArray = new Uint8Array(hexString.length / 2);
  for (let i = 0, j = 0; i < hexString.length; i += 2, j++) {
    byteArray[j] = parseInt(hexString.substr(i, 2), 16);
  }
  return byteArray;
}
function toHex(byteArray) {
  let hexString = "";
  for (let i = 0; i < byteArray.length; i++) {
    hexString += ("0" + (byteArray[i] & 255).toString(16)).slice(-2);
  }
  return hexString;
}
function sha2_256(data) {
  return Hash32ByteBase162(toHex(sha256(fromHex(data))));
}
function sha3_2562(data) {
  return Hash32ByteBase162(toHex(sha3.sha3_256(fromHex(data))));
}
function blake2b_256(data) {
  return Hash32ByteBase162(blake.blake2bHex(fromHex(data), void 0, 32));
}
function blake2b_224(data) {
  return Hash28ByteBase162(blake.blake2bHex(fromHex(data), void 0, 28));
}
function derivePublicKey(privateKey) {
  if (privateKey.length > 64) {
    return Ed25519PublicKeyHex2(
      toHex(ed.getPublicKey(fromHex(privateKey.slice(0, 64))))
    );
  } else {
    return Ed25519PublicKeyHex2(toHex(ed.getPublicKey(fromHex(privateKey))));
  }
}
function signMessage(message, privateKey) {
  return Ed25519SignatureHex2(toHex(ed.sign(message, privateKey.slice(0, 64))));
}
var generateMnemonic2 = bip39.generateMnemonic;
var entropyToMnemonic2 = bip39.entropyToMnemonic;
var mnemonicToEntropy2 = bip39.mnemonicToEntropy;
var addressFromBech32 = Address.fromBech32;
var addressFromValidator = (network, validator) => new Address({
  paymentPart: { hash: validator.hash(), type: CredentialType.ScriptHash },
  type: AddressType.EnterpriseScript,
  networkId: network
});
var addressFromCredential = (network, credential) => {
  const cred = credential.toCore();
  let type;
  if (cred.type == CredentialType.KeyHash) {
    type = AddressType.EnterpriseKey;
  } else {
    type = AddressType.EnterpriseScript;
  }
  return new Address({
    paymentPart: credential.toCore(),
    type,
    networkId: network
  });
};
var addressFromCredentials = (network, paymentCredential, delegationCredential) => {
  const pCred = paymentCredential.toCore();
  const dCred = delegationCredential?.toCore();
  let type;
  if (!dCred) {
    if (pCred.type == CredentialType.KeyHash) {
      type = AddressType.EnterpriseKey;
    } else {
      type = AddressType.EnterpriseScript;
    }
  } else {
    if (pCred.type == CredentialType.KeyHash) {
      if (dCred.type == CredentialType.KeyHash) {
        type = AddressType.BasePaymentKeyStakeKey;
      } else {
        type = AddressType.BasePaymentKeyStakeScript;
      }
    } else {
      if (dCred.type == CredentialType.KeyHash) {
        type = AddressType.BasePaymentScriptStakeKey;
      } else {
        type = AddressType.BasePaymentScriptStakeScript;
      }
    }
  }
  return new Address({
    paymentPart: paymentCredential.toCore(),
    delegationPart: delegationCredential?.toCore(),
    type,
    networkId: network
  });
};
var burnCred = Credential.fromCore({
  hash: Hash28ByteBase162(
    // From https://cardano-tools.io/burn-address
    "bbece14f554b0020fe2715d05801f4680ebd40d11a58f14740b9f2c5"
  ),
  type: CredentialType.ScriptHash
});
var getBurnAddress = (network) => addressFromCredential(network, burnCred);
var CborSet = C2.Serialization.CborSet;
var setInConwayEra2 = C2.setInConwayEra;

// src/params.ts
var hardCodedProtocolParams = {
  coinsPerUtxoByte: 4310,
  // The number of coins per UTXO byte.
  minFeeReferenceScripts: { base: 15, range: 25600, multiplier: 1.2 },
  maxTxSize: 16384,
  // The maximum transaction size.
  minFeeCoefficient: 44,
  // The minimum fee coefficient.
  minFeeConstant: 155381,
  // The minimum fee constant.
  maxBlockBodySize: 90112,
  // The maximum block body size.
  maxBlockHeaderSize: 1100,
  // The maximum block header size.
  stakeKeyDeposit: 2e6,
  // The stake key deposit.
  poolDeposit: 5e8,
  // The pool deposit.
  poolRetirementEpochBound: 18,
  // The pool retirement epoch bound.
  desiredNumberOfPools: 500,
  // The desired number of pools.
  poolInfluence: "3/10",
  // The pool influence.
  monetaryExpansion: "3/1000",
  // The monetary expansion.
  treasuryExpansion: "1/5",
  // The treasury expansion.
  minPoolCost: 17e7,
  // The minimum pool cost.
  protocolVersion: { major: 9, minor: 0 },
  // The protocol version.
  maxValueSize: 5e3,
  // The maximum value size.
  collateralPercentage: 150,
  // The collateral percentage.
  maxCollateralInputs: 3,
  // The maximum collateral inputs.
  costModels: (/* @__PURE__ */ new Map()).set(
    0,
    [
      100788,
      420,
      1,
      1,
      1e3,
      173,
      0,
      1,
      1e3,
      59957,
      4,
      1,
      11183,
      32,
      201305,
      8356,
      4,
      16e3,
      100,
      16e3,
      100,
      16e3,
      100,
      16e3,
      100,
      16e3,
      100,
      16e3,
      100,
      100,
      100,
      16e3,
      100,
      94375,
      32,
      132994,
      32,
      61462,
      4,
      72010,
      178,
      0,
      1,
      22151,
      32,
      91189,
      769,
      4,
      2,
      85848,
      228465,
      122,
      0,
      1,
      1,
      1e3,
      42921,
      4,
      2,
      24548,
      29498,
      38,
      1,
      898148,
      27279,
      1,
      51775,
      558,
      1,
      39184,
      1e3,
      60594,
      1,
      141895,
      32,
      83150,
      32,
      15299,
      32,
      76049,
      1,
      13169,
      4,
      22100,
      10,
      28999,
      74,
      1,
      28999,
      74,
      1,
      43285,
      552,
      1,
      44749,
      541,
      1,
      33852,
      32,
      68246,
      32,
      72362,
      32,
      7243,
      32,
      7391,
      32,
      11546,
      32,
      85848,
      228465,
      122,
      0,
      1,
      1,
      90434,
      519,
      0,
      1,
      74433,
      32,
      85848,
      228465,
      122,
      0,
      1,
      1,
      85848,
      228465,
      122,
      0,
      1,
      1,
      270652,
      22588,
      4,
      1457325,
      64566,
      4,
      20467,
      1,
      4,
      0,
      141992,
      32,
      100788,
      420,
      1,
      1,
      81663,
      32,
      59498,
      32,
      20142,
      32,
      24588,
      32,
      20744,
      32,
      25933,
      32,
      24623,
      32,
      53384111,
      14333,
      10
    ]
  ).set(
    1,
    [
      100788,
      420,
      1,
      1,
      1e3,
      173,
      0,
      1,
      1e3,
      59957,
      4,
      1,
      11183,
      32,
      201305,
      8356,
      4,
      16e3,
      100,
      16e3,
      100,
      16e3,
      100,
      16e3,
      100,
      16e3,
      100,
      16e3,
      100,
      100,
      100,
      16e3,
      100,
      94375,
      32,
      132994,
      32,
      61462,
      4,
      72010,
      178,
      0,
      1,
      22151,
      32,
      91189,
      769,
      4,
      2,
      85848,
      228465,
      122,
      0,
      1,
      1,
      1e3,
      42921,
      4,
      2,
      24548,
      29498,
      38,
      1,
      898148,
      27279,
      1,
      51775,
      558,
      1,
      39184,
      1e3,
      60594,
      1,
      141895,
      32,
      83150,
      32,
      15299,
      32,
      76049,
      1,
      13169,
      4,
      22100,
      10,
      28999,
      74,
      1,
      28999,
      74,
      1,
      43285,
      552,
      1,
      44749,
      541,
      1,
      33852,
      32,
      68246,
      32,
      72362,
      32,
      7243,
      32,
      7391,
      32,
      11546,
      32,
      85848,
      228465,
      122,
      0,
      1,
      1,
      90434,
      519,
      0,
      1,
      74433,
      32,
      85848,
      228465,
      122,
      0,
      1,
      1,
      85848,
      228465,
      122,
      0,
      1,
      1,
      955506,
      213312,
      0,
      2,
      270652,
      22588,
      4,
      1457325,
      64566,
      4,
      20467,
      1,
      4,
      0,
      141992,
      32,
      100788,
      420,
      1,
      1,
      81663,
      32,
      59498,
      32,
      20142,
      32,
      24588,
      32,
      20744,
      32,
      25933,
      32,
      24623,
      32,
      43053543,
      10,
      53384111,
      14333,
      10,
      43574283,
      26308,
      10
    ]
  ),
  // .set(
  //   2,
  //   [
  //     100788, 420, 1, 1, 1000, 173, 0, 1, 1000, 59957, 4, 1, 11183, 32,
  //     201305, 8356, 4, 16000, 100, 16000, 100, 16000, 100, 16000, 100, 16000,
  //     100, 16000, 100, 100, 100, 16000, 100, 94375, 32, 132994, 32, 61462, 4,
  //     72010, 178, 0, 1, 22151, 32, 91189, 769, 4, 2, 85848, 123203, 7305,
  //     -900, 1716, 549, 57, 85848, 0, 1, 1, 1000, 42921, 4, 2, 24548, 29498,
  //     38, 1, 898148, 27279, 1, 51775, 558, 1, 39184, 1000, 60594, 1, 141895,
  //     32, 83150, 32, 15299, 32, 76049, 1, 13169, 4, 22100, 10, 28999, 74, 1,
  //     28999, 74, 1, 43285, 552, 1, 44749, 541, 1, 33852, 32, 68246, 32, 72362,
  //     32, 7243, 32, 7391, 32, 11546, 32, 85848, 123203, 7305, -900, 1716, 549,
  //     57, 85848, 0, 1, 90434, 519, 0, 1, 74433, 32, 85848, 123203, 7305, -900,
  //     1716, 549, 57, 85848, 0, 1, 1, 85848, 123203, 7305, -900, 1716, 549, 57,
  //     85848, 0, 1, 955506, 213312, 0, 2, 270652, 22588, 4, 1457325, 64566, 4,
  //     20467, 1, 4, 0, 141992, 32, 100788, 420, 1, 1, 81663, 32, 59498, 32,
  //     20142, 32, 24588, 32, 20744, 32, 25933, 32, 24623, 32, 43053543, 10,
  //     53384111, 14333, 10, 43574283, 26308, 10, 16000, 100, 16000, 100,
  //     962335, 18, 2780678, 6, 442008, 1, 52538055, 3756, 18, 267929, 18,
  //     76433006, 8868, 18, 52948122, 18, 1995836, 36, 3227919, 12, 901022, 1,
  //     166917843, 4307, 36, 284546, 36, 158221314, 26549, 36, 74698472, 36,
  //     333849714, 1, 254006273, 72, 2174038, 72, 2261318, 64571, 4, 207616,
  //     8310, 4, 1293828, 28716, 63, 0, 1, 1006041, 43623, 251, 0, 1,
  //   ],
  // ),
  prices: { memory: 577 / 1e4, steps: 721e-7 },
  // The prices.
  maxExecutionUnitsPerTransaction: { memory: 14e6, steps: 1e10 },
  // The maximum execution units per transaction.
  maxExecutionUnitsPerBlock: { memory: 62e6, steps: 2e10 }
  // The maximum execution units per block.
};

// src/pretty.ts
var ansiColors = {
  reset: "\x1B[0m",
  bold: "\x1B[1m",
  fg: {
    black: "\x1B[38;5;240m",
    red: "\x1B[38;5;203m",
    green: "\x1B[38;5;114m",
    yellow: "\x1B[38;5;180m",
    blue: "\x1B[38;5;67m",
    magenta: "\x1B[38;5;139m",
    cyan: "\x1B[38;5;73m",
    white: "\x1B[38;5;252m",
    gray: "\x1B[38;5;245m"
  }
};
function prettify_plutusData(data, indent) {
  if (data.getKind() === PlutusDataKind.Bytes) {
    const hexValue = toHex(data.asBoundedBytes());
    const textValue = Buffer.from(data.asBoundedBytes()).toString("utf-8").replace(/\r\n|\r|\n/g, "\\n");
    return `${ansiColors.fg.gray}"${textValue}"${ansiColors.reset}
${indent}${ansiColors.fg.cyan}${hexValue}${ansiColors.reset}`;
  } else if (data.getKind() === PlutusDataKind.ConstrPlutusData) {
    const innerData = prettify(
      PlutusData.newList(data.asConstrPlutusData().getData()),
      indent + "  "
    );
    return `${ansiColors.fg.magenta}Constr ${ansiColors.fg.yellow}${data.asConstrPlutusData().getAlternative()}${ansiColors.reset} ${innerData}`;
  } else if (data.getKind() === PlutusDataKind.List) {
    const items = [];
    for (let i = 0; i < data.asList().getLength(); i++) {
      items.push(data.asList().get(i));
    }
    const innerIndent = indent + "  ";
    if (items.length === 0) {
      return `${ansiColors.fg.blue}[]${ansiColors.reset}`;
    }
    const itemsStr = items.map((item) => innerIndent + prettify(item, innerIndent)).join(",\n");
    return `${ansiColors.fg.blue}[
${itemsStr}
${indent}${ansiColors.fg.blue}]${ansiColors.reset}`;
  } else if (data.getKind() === PlutusDataKind.Map) {
    let pretty = `${ansiColors.fg.blue}{
`;
    const list = data.asMap().getKeys();
    const innerIndent = indent + "  ";
    for (let i = 0; i < list.getLength(); i++) {
      const key = prettify(list.get(i), innerIndent);
      const value = prettify(data.asMap().get(list.get(i)), innerIndent);
      pretty += `${innerIndent}${ansiColors.fg.gray}[${key}${ansiColors.fg.gray}]${ansiColors.reset}: ${value}`;
      if (i < list.getLength() - 1) {
        pretty += ",\n";
      }
    }
    return `${pretty}
${indent}${ansiColors.fg.blue}}${ansiColors.reset}`;
  } else {
    return `${ansiColors.fg.yellow}${data.asInteger().toString()}${ansiColors.reset}`;
  }
}
var prettierFunctions = [
  (data, _indent) => {
    if (typeof data === "string")
      return `${ansiColors.fg.green}"${data}"${ansiColors.reset}`;
    if (typeof data === "number")
      return `${ansiColors.fg.yellow}${data.toString()}${ansiColors.reset}`;
    if (typeof data === "boolean")
      return `${ansiColors.fg.magenta}${data.toString()}${ansiColors.reset}`;
    if (data === null) return `${ansiColors.fg.red}null${ansiColors.reset}`;
    return "";
  },
  (data, indent) => {
    if (data instanceof PlutusData) {
      return prettify_plutusData(data, indent);
    }
    return "";
  }
];
function prettify(data, indent = "") {
  for (const func of prettierFunctions) {
    const result = func(data, indent);
    if (result !== "") return result;
  }
  throw new Error(`Could not prettify unknown type ${typeof data}`);
}

// src/errors.ts
var UTxOSelectionError = class extends Error {
  constructor(phase, dearth, availableInputs, selectedInputs, bestStep) {
    super("UTxO Balance Insufficient");
    this.phase = phase;
    this.dearth = dearth;
    this.availableInputs = availableInputs;
    this.selectedInputs = selectedInputs;
    this.bestStep = bestStep;
  }
};
export {
  Address,
  AddressType,
  AssetId,
  AssetName,
  AuxiliaryData,
  Bip32PrivateKey2 as Bip32PrivateKey,
  Bip32PrivateKeyHex,
  Bip32PublicKey2 as Bip32PublicKey,
  CborReader,
  CborReaderState,
  CborSet,
  CborWriter,
  Certificate,
  CertificateType,
  ConstrPlutusData,
  CostModel,
  Costmdls,
  Credential,
  CredentialType,
  Datum,
  DatumHash,
  DatumKind,
  Ed25519KeyHashHex2 as Ed25519KeyHashHex,
  Ed25519PrivateExtendedKeyHex,
  Ed25519PrivateKey2 as Ed25519PrivateKey,
  Ed25519PrivateNormalKeyHex,
  Ed25519PublicKey2 as Ed25519PublicKey,
  Ed25519PublicKeyHex2 as Ed25519PublicKeyHex,
  Ed25519Signature2 as Ed25519Signature,
  Ed25519SignatureHex2 as Ed25519SignatureHex,
  ExUnits,
  Hash,
  Hash28ByteBase162 as Hash28ByteBase16,
  Hash32ByteBase162 as Hash32ByteBase16,
  HashAsPubKeyHex,
  HexBlob,
  Metadata,
  Metadatum,
  MetadatumList,
  MetadatumMap,
  NativeScript,
  NetworkId,
  PaymentAddress,
  PlutusData,
  PlutusDataKind,
  PlutusLanguageVersion,
  PlutusList,
  PlutusMap,
  PlutusV1Script,
  PlutusV2Script,
  PlutusV3Script,
  PolicyId,
  PolicyIdToHash,
  PoolId,
  Redeemer,
  RedeemerPurpose,
  RedeemerTag,
  Redeemers,
  RewardAccount,
  RewardAddress,
  SLOT_CONFIG_NETWORK,
  Script,
  ScriptAll,
  ScriptAny,
  ScriptNOfK,
  ScriptPubkey,
  Slot,
  StakeDelegation,
  StakeRegistration,
  TimelockExpiry,
  TimelockStart,
  Transaction,
  TransactionBody,
  TransactionId,
  TransactionInput,
  TransactionMetadatumKind,
  TransactionOutput,
  TransactionUnspentOutput,
  TransactionWitnessSet,
  TxCBOR,
  UTxOSelectionError,
  Value,
  VkeyWitness,
  addressFromBech32,
  addressFromCredential,
  addressFromCredentials,
  addressFromValidator,
  blake2b_224,
  blake2b_256,
  derivePublicKey,
  entropyToMnemonic2 as entropyToMnemonic,
  fromHex,
  generateMnemonic2 as generateMnemonic,
  getBurnAddress,
  getPaymentAddress,
  hardCodedProtocolParams,
  mnemonicToEntropy2 as mnemonicToEntropy,
  prettify,
  setInConwayEra2 as setInConwayEra,
  sha2_256,
  sha3_2562 as sha3_256,
  signMessage,
  toHex,
  typedHex2 as typedHex,
  wordlist
};
