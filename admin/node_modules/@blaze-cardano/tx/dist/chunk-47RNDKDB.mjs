var __defProp = Object.defineProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};

// src/value.ts
var value_exports = {};
__export(value_exports, {
  assetTypes: () => assetTypes,
  assets: () => assets,
  empty: () => empty,
  intersect: () => intersect,
  makeValue: () => makeValue,
  merge: () => merge,
  negate: () => negate,
  negatives: () => negatives,
  positives: () => positives,
  sub: () => sub,
  zero: () => zero
});
import { Value, AssetId } from "@blaze-cardano/core";
function merge(a, b) {
  const ma = new Map(a.multiasset());
  b.multiasset()?.forEach((v, k) => {
    const newVal = (ma.get(k) ?? 0n) + v;
    if (newVal == 0n) {
      ma.delete(k);
    } else {
      ma.set(k, newVal);
    }
  });
  return new Value(
    BigInt(a.coin()) + BigInt(b.coin()),
    ma.size > 0 ? ma : void 0
  );
}
function negate(v) {
  const entries = v.multiasset()?.entries();
  const tokenMap = /* @__PURE__ */ new Map();
  if (entries) {
    for (const entry of entries) {
      tokenMap.set(entry[0], -entry[1]);
    }
  }
  return new Value(-v.coin(), tokenMap);
}
function sub(a, b) {
  return merge(a, negate(b));
}
function intersect(a, b) {
  let count = a.coin() != 0n && b.coin() != 0n ? 1 : 0;
  const multiAssetA = a.multiasset();
  const multiAssetB = b.multiasset();
  if (multiAssetA && multiAssetB) {
    for (const [asset] of multiAssetA) {
      if (multiAssetB.get(asset) != void 0) {
        count += 1;
      }
    }
  }
  return count;
}
function positives(v) {
  const entries = v.multiasset()?.entries();
  const coin = v.coin() > 0n ? v.coin() : 0n;
  const tokenMap = /* @__PURE__ */ new Map();
  if (entries) {
    for (const entry of entries) {
      if (entry[1] > 0n) {
        tokenMap.set(entry[0], entry[1]);
      }
    }
  }
  return new Value(coin, tokenMap);
}
function negatives(v) {
  const entries = v.multiasset()?.entries();
  const coin = v.coin() < 0n ? v.coin() : 0n;
  const tokenMap = /* @__PURE__ */ new Map();
  if (entries) {
    for (const entry of entries) {
      if (entry[1] < 0n) {
        tokenMap.set(entry[0], entry[1]);
      }
    }
  }
  return new Value(coin, tokenMap);
}
function assets(v) {
  const assets2 = v.coin() == 0n ? [] : ["lovelace"];
  const assetKeys = v.multiasset()?.keys();
  if (assetKeys) {
    for (const asset of assetKeys) {
      assets2.push(asset);
    }
  }
  return assets2;
}
function assetTypes(v) {
  let count = v.coin() == 0n ? 0 : 1;
  const entries = v.multiasset();
  if (entries) {
    entries.forEach(() => {
      count += 1;
    });
  }
  return count;
}
function empty(v) {
  return assetTypes(v) == 0;
}
var zero = () => new Value(0n);
function makeValue(lovelace, ...assets2) {
  if (assets2.length == 0) {
    return Value.fromCore({ coins: lovelace });
  }
  const tokenMap = /* @__PURE__ */ new Map();
  for (const [asset, qty] of assets2) {
    if (qty == 0n)
      throw new Error(
        "Cannot create a Value object with a zero quantity asset."
      );
    tokenMap.set(AssetId(asset), qty);
  }
  return Value.fromCore({
    coins: lovelace,
    assets: tokenMap
  });
}

export {
  __export,
  merge,
  negate,
  sub,
  intersect,
  positives,
  negatives,
  assets,
  assetTypes,
  empty,
  zero,
  makeValue,
  value_exports
};
